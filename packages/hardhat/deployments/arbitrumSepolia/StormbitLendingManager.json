{
  "address": "0x6BA3F65f41F4A40884Dd38d9C1dBAe4C8aF3c618",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialGovernor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "BorrowerWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "DepositToTerm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "name": "DistributeProfit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "FreezeSharesOnTerm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "comission",
          "type": "uint256"
        }
      ],
      "name": "LendingTermCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "LendingTermRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromTerm",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetManager",
      "outputs": [
        {
          "internalType": "contract IAssetManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "borrowerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "comission",
          "type": "uint256"
        },
        {
          "internalType": "contract IHooks",
          "name": "hooks",
          "type": "address"
        }
      ],
      "name": "createLendingTerm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "depositToTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ownerProfit",
          "type": "uint256"
        }
      ],
      "name": "distributeProfit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "freezeTermShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getLendingTerm",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "comission",
              "type": "uint256"
            },
            {
              "internalType": "contract IHooks",
              "name": "hooks",
              "type": "address"
            }
          ],
          "internalType": "struct ILendingManager.LendingTermMetadata",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getLendingTermBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTermFreezedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUserTotalDelegatedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        }
      ],
      "name": "getWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetManagerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loanManagerAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lendingTerms",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "comission",
          "type": "uint256"
        },
        {
          "internalType": "contract IHooks",
          "name": "hooks",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanManager",
      "outputs": [
        {
          "internalType": "contract ILoanManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "removeLendingTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToken",
          "type": "address"
        }
      ],
      "name": "termUserDelegatedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToken",
          "type": "address"
        }
      ],
      "name": "userTotalDelegatedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delegatedShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb810ace96e093ec7b832915e469da4abda76b27f04ac3377a9b3bb07602ccfbd",
  "receipt": {
    "to": null,
    "from": "0xDe3089d40F3491De794fBb1ECA109fAc36F889d0",
    "contractAddress": "0x6BA3F65f41F4A40884Dd38d9C1dBAe4C8aF3c618",
    "transactionIndex": 1,
    "gasUsed": "3166997",
    "logsBloom": "0x
    "blockHash": "0x8c723c6efc105616193d7819648d5ec36ced99108eedecb4f865de04f7e313ba",
    "transactionHash": "0xb810ace96e093ec7b832915e469da4abda76b27f04ac3377a9b3bb07602ccfbd",
    "logs": [],
    "blockNumber": 59963989,
    "cumulativeGasUsed": "3166997",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDe3089d40F3491De794fBb1ECA109fAc36F889d0"
  ],
  "numDeployments": 1,
  "solcInputHash": "fc88f2785a8cc64f484af0517b95c10f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialGovernor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"BorrowerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"DepositToTerm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"DistributeProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"FreezeSharesOnTerm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"}],\"name\":\"LendingTermCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"LendingTermRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromTerm\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetManager\",\"outputs\":[{\"internalType\":\"contract IAssetManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"borrowerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"createLendingTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"depositToTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerProfit\",\"type\":\"uint256\"}],\"name\":\"distributeProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"freezeTermShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLendingTerm\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"struct ILendingManager.LendingTermMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLendingTermBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTermFreezedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserTotalDelegatedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"}],\"name\":\"getWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanManagerAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lendingTerms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"comission\",\"type\":\"uint256\"},{\"internalType\":\"contract IHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanManager\",\"outputs\":[{\"internalType\":\"contract ILoanManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"removeLendingTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToken\",\"type\":\"address\"}],\"name\":\"termUserDelegatedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToken\",\"type\":\"address\"}],\"name\":\"userTotalDelegatedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delegatedShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawFromTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Think of terms are minimal ERC4626, this contract is using word \\\"shares\\\" to represent ERC4626 assets, and \\\"weight\\\" to represent ERC4626 shares\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"createLendingTerm(uint256,address)\":{\"details\":\"create a lending term\",\"params\":{\"comission\":\"comission rate\",\"hooks\":\"customizable hooks, reference uniswap v4 hooks\"},\"returns\":{\"_0\":\"id of the lending term\"}},\"depositToTerm(uint256,address,uint256)\":{\"details\":\"allow depositor to delegate shares to a lending term\",\"params\":{\"shares\":\"amount of shares to delegate\",\"termId\":\"id of the lending term\",\"token\":\"address of the token\"}},\"freezeTermShares(uint256,uint256,address)\":{\"details\":\"freeze the shares on term when allocated fund to loan\"},\"removeLendingTerm(uint256)\":{\"details\":\"remove a lending term\",\"params\":{\"id\":\"id of the lending term\"}},\"withdrawFromTerm(uint256,address,uint256)\":{\"details\":\"allow lender to decrease delegated shares to a lending term\",\"params\":{\"shares\":\"amount of shares to withdraw\",\"termId\":\"id of the lending term\",\"token\":\"address of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingManager.sol\":\"StormbitLendingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"contracts/LendingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC4626} from \\\"./interfaces/token/IERC4626.sol\\\";\\nimport {IGovernable} from \\\"./interfaces/utils/IGovernable.sol\\\";\\nimport {IInitialize} from \\\"./interfaces/utils/IInitialize.sol\\\";\\nimport {IHooks} from \\\"./interfaces/hooks/IHooks.sol\\\";\\nimport {IAssetManager} from \\\"./interfaces/managers/asset/IAssetManager.sol\\\";\\nimport {ILoanManager} from \\\"./interfaces/managers/loan/ILoanManager.sol\\\";\\nimport {ILendingManager} from \\\"./interfaces/managers/lending/ILendingManager.sol\\\";\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Lending Manager\\n/// @notice entrypoint for all lender and lending terms operations\\n\\n/// @dev Think of terms are minimal ERC4626, this contract is using word \\\"shares\\\" to represent ERC4626 assets, and \\\"weight\\\" to represent ERC4626 shares\\ncontract StormbitLendingManager is Initializable, IGovernable, IInitialize, ILendingManager {\\n    uint16 public constant BASIS_POINTS = 10_000;\\n\\n    address private _governor;\\n    IAssetManager public assetManager;\\n    ILoanManager public loanManager;\\n\\n    mapping(uint256 => ILendingManager.LendingTerm) public lendingTerms;\\n    mapping(uint256 termId => mapping(address user => mapping(address vaultToken => uint256 shares))) public\\n        termUserDelegatedShares; // total shares delegated by the depositor on term\\n    mapping(address user => mapping(address vaultToken => uint256 delegatedShares)) // track user total delegated shares\\n        public userTotalDelegatedShares;\\n\\n    constructor(address initialGovernor) {\\n        _governor = initialGovernor;\\n    }\\n\\n    // -----------------------------------------\\n    // ------------- Modifiers -----------------\\n    // -----------------------------------------\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor, \\\"StormbitAssetManager: not governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyLoanManager() {\\n        require(msg.sender == address(loanManager), \\\"StormbitLendingManager: not loan manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyTermOwner(uint256 termId) {\\n        require(lendingTerms[termId].owner == msg.sender, \\\"StormbitLendingManager: not term owner\\\");\\n        _;\\n    }\\n\\n    // -----------------------------------------\\n    // -------- PUBLIC FUNCTIONS ---------------\\n    // -----------------------------------------\\n\\n    function initialize(address assetManagerAddr, address loanManagerAddr) public override initializer {\\n        assetManager = IAssetManager(assetManagerAddr);\\n        loanManager = ILoanManager(loanManagerAddr);\\n    }\\n\\n    /// @dev create a lending term\\n    /// @param comission comission rate\\n    /// @param hooks customizable hooks, reference uniswap v4 hooks\\n    /// @return id of the lending term\\n    function createLendingTerm(uint256 comission, IHooks hooks) public override returns (uint256) {\\n        // unique id by hashing the sender and hooks address\\n        uint256 id = uint256(keccak256(abi.encode(msg.sender, address(hooks))));\\n        require(!_validLendingTerm(id), \\\"StormbitLendingManager: lending term already exists\\\");\\n        lendingTerms[id].owner = msg.sender;\\n        lendingTerms[id].comission = comission;\\n        lendingTerms[id].hooks = hooks;\\n\\n        emit LendingTermCreated(id, msg.sender, comission);\\n        return id;\\n    }\\n\\n    /// @dev remove a lending term\\n    /// @param id id of the lending term\\n    function removeLendingTerm(uint256 id) public override onlyTermOwner(id) {\\n        require(_validLendingTerm(id), \\\"StormbitLendingManager: lending term does not exist\\\");\\n        // if there are delegated shares, the term cannot be removed\\n        require(\\n            lendingTerms[id].termNonZeroTokenCounter[id] <= 0, \\\"StormbitLendingManager: term has non zero token balance\\\"\\n        );\\n\\n        delete lendingTerms[id];\\n        emit LendingTermRemoved(id);\\n    }\\n\\n    /// @dev allow depositor to delegate shares to a lending term\\n    /// @param termId id of the lending term\\n    /// @param token address of the token\\n    /// @param shares amount of shares to delegate\\n    function depositToTerm(uint256 termId, address token, uint256 shares) public override {\\n        require(_beforeDepositToTerm(termId, token, shares), \\\"StormbitLendingManager: before deposit failed\\\");\\n        require(assetManager.isTokenSupported(token), \\\"StormbitLendingManager: token not supported\\\");\\n        require(_validLendingTerm(termId), \\\"StormbitLendingManager: lending term does not exist\\\");\\n        require(\\n            loanManager.getTermLoanAllocatedCounter(termId) == 0,\\n            \\\"StormbitLendingManager: term already allocated to loan\\\"\\n        );\\n\\n        address vaultToken = assetManager.getVaultToken(token);\\n\\n        // get user shares in the vault\\n        uint256 userShares = assetManager.getUserShares(token, msg.sender);\\n        // check if the user has enough shares\\n        require(userShares >= shares, \\\"StormbitLendingManager: not enough shares\\\");\\n\\n        // transfer shares to lending manager\\n        bool isSuccess = IERC4626(vaultToken).transferFrom(msg.sender, address(this), shares);\\n        if (!isSuccess) {\\n            revert(\\\"StormbitLendingManager: failed to transfer shares\\\");\\n        }\\n        LendingTerm storage term = lendingTerms[termId];\\n\\n        uint256 termSharesBalance = term.termBalances[termId][vaultToken].weight;\\n\\n        // check if the vault token term has 0 balance\\n        if (termSharesBalance <= 0) {\\n            term.termNonZeroTokenCounter[termId]++;\\n        }\\n\\n        // update the amount of shares delegated to the term by the user\\n        termUserDelegatedShares[termId][msg.sender][vaultToken] += shares;\\n\\n        // get current delegated shares to the term\\n        uint256 currentDelegatedShares = userTotalDelegatedShares[msg.sender][vaultToken];\\n\\n        uint256 userCurrentTotalDelegatedShares = currentDelegatedShares + shares;\\n        // update user total delegated shares, prevent scenario delegate more than user has\\n        userTotalDelegatedShares[msg.sender][vaultToken] = userCurrentTotalDelegatedShares;\\n\\n        // update term total disposable shares\\n        term.termBalances[termId][vaultToken].available += shares;\\n        term.termBalances[termId][vaultToken].weight += shares;\\n        term.termBalances[termId][vaultToken].shares += shares;\\n\\n        emit DepositToTerm(termId, msg.sender, token, shares);\\n    }\\n\\n    /// @dev allow lender to decrease delegated shares to a lending term\\n    /// @param termId id of the lending term\\n    /// @param token address of the token\\n    /// @param shares amount of shares to withdraw\\n    function withdrawFromTerm(uint256 termId, address token, uint256 shares) public override {\\n        require(_validLendingTerm(termId), \\\"StormbitLendingManager: lending term does not exist\\\");\\n\\n        address vaultToken = assetManager.getVaultToken(token);\\n        LendingTerm storage term = lendingTerms[termId];\\n\\n        uint256 totalDelegatedShares = termUserDelegatedShares[termId][msg.sender][vaultToken];\\n\\n        // check how many percentage of shares are freezed on term\\n        uint256 freezedShares =\\n            term.termBalances[termId][vaultToken].shares - term.termBalances[termId][vaultToken].available;\\n        uint256 freezedSharesPercentage = (freezedShares * BASIS_POINTS) / term.termBalances[termId][vaultToken].shares;\\n        // get the freezeAmount from disposable shares\\n        uint256 freezeAmount = (totalDelegatedShares * freezedSharesPercentage) / BASIS_POINTS;\\n\\n        // cannot withdraw more than disposable shares - freezeAmount\\n        uint256 maximumWithdraw = totalDelegatedShares - freezeAmount;\\n\\n        require(shares <= maximumWithdraw, \\\"StormbitLendingManager: insufficient shares to withdraw\\\");\\n\\n        termUserDelegatedShares[termId][msg.sender][vaultToken] -= shares;\\n        userTotalDelegatedShares[msg.sender][vaultToken] -= shares;\\n\\n        // convert shares to weight\\n        uint256 redeemShares = getWeight(token, shares, termId);\\n\\n        term.termBalances[termId][vaultToken].weight -= redeemShares;\\n        term.termBalances[termId][vaultToken].available -= shares;\\n        term.termBalances[termId][vaultToken].shares -= shares;\\n\\n        // transfer shares back to user\\n        bool isSuccess = IERC4626(vaultToken).transfer(msg.sender, redeemShares);\\n        if (!isSuccess) {\\n            revert(\\\"StormbitLendingManager: failed to transfer shares\\\");\\n        }\\n\\n        // if term shares balance is 0, decrement the counter\\n        if (term.termBalances[termId][vaultToken].shares <= 0) {\\n            term.termNonZeroTokenCounter[termId]--;\\n        }\\n\\n        emit WithdrawFromTerm(termId, msg.sender, token, shares);\\n    }\\n\\n    /// @dev freeze the shares on term when allocated fund to loan\\n    function freezeTermShares(uint256 termId, uint256 shares, address token) public override onlyLoanManager {\\n        require(_validLendingTerm(termId), \\\"StormbitLendingManager: lending term does not exist\\\");\\n        address vaultToken = assetManager.getVaultToken(token);\\n\\n        LendingTerm storage term = lendingTerms[termId];\\n\\n        require(\\n            term.termBalances[termId][vaultToken].available >= shares,\\n            \\\"StormbitLendingManager: insufficient disposable shares\\\"\\n        );\\n        term.termBalances[termId][vaultToken].available -= shares;\\n\\n        emit FreezeSharesOnTerm(termId, token, shares);\\n    }\\n\\n    function distributeProfit(uint256 termId, address token, uint256 profit, uint256 shares, uint256 ownerProfit)\\n        public\\n        override\\n        onlyLoanManager\\n    {\\n        require(_validLendingTerm(termId), \\\"StormbitLendingManager: lending term does not exist\\\");\\n\\n        address vaultToken = assetManager.getVaultToken(token);\\n        LendingTerm storage term = lendingTerms[termId];\\n\\n        // transfer profit shares to term owner\\n        bool isSuccess = IERC4626(vaultToken).transfer(term.owner, ownerProfit);\\n        if (!isSuccess) {\\n            revert(\\\"StormbitLendingManager: failed to transfer profit\\\");\\n        }\\n\\n        term.termBalances[termId][vaultToken].weight += profit;\\n        term.termBalances[termId][vaultToken].available += shares;\\n\\n        emit DistributeProfit(termId, token, profit);\\n    }\\n\\n    function borrowerWithdraw(address borrower, address token, uint256 assets) public override onlyLoanManager {\\n        address vaultToken = assetManager.getVaultToken(token);\\n        // convert assets to shares\\n        uint256 shares = assetManager.convertToShares(token, assets);\\n        IERC4626(vaultToken).approve(address(assetManager), shares);\\n        assetManager.borrowerWithdraw(borrower, token, assets);\\n        emit BorrowerWithdraw(borrower, token, assets);\\n    }\\n\\n    // -----------------------------------------\\n    // ---------- PRIVATE FUNCTIONS ------------\\n    // -----------------------------------------\\n    function _beforeDepositToTerm(uint256 termId, address token, uint256 shares) private returns (bool) {\\n        IHooks hooks = lendingTerms[termId].hooks;\\n        // ! todo: remove this\\n        if (address(hooks) == address(0) || address(hooks) == address(1)) {\\n            return true;\\n        }\\n        return hooks.beforeDepositToTerm(msg.sender, token, termId, shares);\\n    }\\n\\n    // -----------------------------------------\\n    // ---------- INTERNAL FUNCTIONS -----------\\n    // -----------------------------------------\\n\\n    /// @dev check if lending term exists\\n    /// @param id id of the lending term\\n    function _validLendingTerm(uint256 id) internal view returns (bool) {\\n        return lendingTerms[id].owner != address(0);\\n    }\\n\\n    // -----------------------------------------\\n    // -------- PUBLIC GETTER FUNCTIONS --------\\n    // -----------------------------------------\\n\\n    function governor() public view override returns (address) {\\n        return _governor;\\n    }\\n\\n    function getLendingTerm(uint256 id) public view override returns (LendingTermMetadata memory) {\\n        return LendingTermMetadata(lendingTerms[id].owner, lendingTerms[id].comission, lendingTerms[id].hooks);\\n    }\\n\\n    function getLendingTermBalances(uint256 termId, address token)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256, uint256)\\n    {\\n        address vaultToken = assetManager.getVaultToken(token);\\n        return (\\n            lendingTerms[termId].termBalances[termId][vaultToken].weight,\\n            lendingTerms[termId].termBalances[termId][vaultToken].available,\\n            lendingTerms[termId].termBalances[termId][vaultToken].shares\\n        );\\n    }\\n\\n    function getTermFreezedShares(uint256 termId, address token) public view override returns (uint256) {\\n        address vaultToken = assetManager.getVaultToken(token);\\n        return lendingTerms[termId].termBalances[termId][vaultToken].shares\\n            - lendingTerms[termId].termBalances[termId][vaultToken].available;\\n    }\\n\\n    function getUserTotalDelegatedShares(address user, address token) public view override returns (uint256) {\\n        address vaultToken = assetManager.getVaultToken(token);\\n        return userTotalDelegatedShares[user][vaultToken];\\n    }\\n\\n    function getWeight(address token, uint256 shares, uint256 termId) public view returns (uint256) {\\n        // similar to convertToShares\\n        // assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n        address vaultToken = assetManager.getVaultToken(token);\\n\\n        // get term\\n        LendingTerm storage term = lendingTerms[termId];\\n        // get term weight balance (shares)\\n        uint256 termWeightBalance = term.termBalances[termId][vaultToken].weight;\\n        // get term shares balance (assets)\\n        uint256 termSharesBalance = term.termBalances[termId][vaultToken].shares;\\n        // convert shares to weight\\n        uint256 weight = (shares * termWeightBalance) / termSharesBalance;\\n\\n        return weight;\\n    }\\n}\\n\",\"keccak256\":\"0x0521c77881e76e010293e99c03a16c96b07345bd7b74f5648b637cf954376fc7\",\"license\":\"MIT\"},\"contracts/interfaces/hooks/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Hooks Interface\\ninterface IHooks {\\n    function beforeDepositToTerm(address from, address token, uint256 termId, uint256 shares) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc990c6c6da8481dddbcd1941ee76c6060fa2d79fe00ee4c4530be4d9857312fa\",\"license\":\"MIT\"},\"contracts/interfaces/managers/asset/IAssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Asset Manager Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface IAssetManager {\\n    event AddToken(address indexed token, address indexed vault);\\n\\n    event RemoveToken(address indexed token, address indexed vault);\\n\\n    event Deposit(address indexed user, address indexed token, uint256 assets);\\n\\n    /// @dev note that withdraw event uses assets instead of shares\\n    event Withdraw(address indexed user, address indexed vaultToken, uint256 assets, uint256 sharesBurned);\\n\\n    event BorrowerWithdraw(address indexed borrower, address indexed token, uint256 shares);\\n\\n    function addToken(address _asset) external;\\n\\n    function removeToken(address _asset) external;\\n\\n    function isTokenSupported(address token) external view returns (bool);\\n\\n    function getVaultToken(address token) external view returns (address);\\n\\n    function getUserShares(address token, address user) external view returns (uint256);\\n\\n    function convertToShares(address token, uint256 assets) external view returns (uint256);\\n\\n    function convertToAssets(address token, uint256 shares) external view returns (uint256);\\n\\n    function deposit(address token, uint256 assets) external;\\n\\n    function depositFrom(address token, uint256 assets, address depositor, address receiver) external;\\n\\n    function withdraw(address token, uint256 shares) external;\\n\\n    function borrowerWithdraw(address borrower, address token, uint256 assets) external;\\n}\\n\",\"keccak256\":\"0x1592b04aa36f3055611d05739d3a8a891e69de4a759640641fbf9cacfbbf8428\",\"license\":\"MIT\"},\"contracts/interfaces/managers/lending/ILendingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IHooks} from \\\"../../hooks/IHooks.sol\\\";\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Lending Manager Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface ILendingManager {\\n    struct Balances {\\n        uint256 available; // available for tracking disposable shares\\n        uint256 weight; // weight is shares + profit\\n        uint256 shares; // shares is weight but without profit\\n    }\\n\\n    struct LendingTerm {\\n        address owner;\\n        uint256 comission; // TODO add balances and other ERC4626 custom fields\\n        IHooks hooks;\\n        mapping(uint256 termId => mapping(address vaultToken => Balances balances)) termBalances; // total shares controlled by the term owner\\n        mapping(uint256 termId => uint256 nonZeroTokenBalanceCounter) termNonZeroTokenCounter; // track non zero token counter\\n    }\\n\\n    struct LendingTermMetadata {\\n        address owner;\\n        uint256 comission;\\n        IHooks hooks;\\n    }\\n\\n    event LendingTermCreated(uint256 indexed id, address lender, uint256 comission);\\n\\n    event LendingTermRemoved(uint256 indexed id);\\n\\n    event BorrowerWithdraw(address indexed borrower, address indexed token, uint256 assets);\\n\\n    event DepositToTerm(uint256 indexed id, address indexed user, address indexed token, uint256 shares);\\n\\n    event WithdrawFromTerm(uint256 indexed id, address indexed user, address indexed token, uint256 shares);\\n\\n    event FreezeSharesOnTerm(uint256 indexed termId, address indexed token, uint256 shares);\\n\\n    event DistributeProfit(uint256 indexed termId, address indexed token, uint256 profit);\\n\\n    function createLendingTerm(uint256 comission, IHooks hooks) external returns (uint256);\\n\\n    function removeLendingTerm(uint256 id) external;\\n\\n    function borrowerWithdraw(address borrower, address token, uint256 assets) external;\\n\\n    function depositToTerm(uint256 termId, address token, uint256 shares) external;\\n\\n    function withdrawFromTerm(uint256 termId, address token, uint256 requestedDecrease) external;\\n\\n    function freezeTermShares(uint256 termId, uint256 shares, address token) external;\\n\\n    function distributeProfit(uint256 termId, address token, uint256 weight, uint256 shares, uint256 ownerProfit)\\n        external;\\n\\n    function getLendingTerm(uint256 id) external returns (LendingTermMetadata memory);\\n\\n    function getTermFreezedShares(uint256 termId, address token) external view returns (uint256);\\n\\n    function getUserTotalDelegatedShares(address user, address token) external view returns (uint256);\\n\\n    function getLendingTermBalances(uint256 termId, address token) external view returns (uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x7a65150775050fd55e09cb63a2c35fc107939e0ead0066d064035308a1507869\",\"license\":\"MIT\"},\"contracts/interfaces/managers/loan/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Loan Manager Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface ILoanManager {\\n    enum LoanStatus {\\n        Pending,\\n        Active,\\n        Repaid,\\n        Cancelled\\n    }\\n\\n    struct Loan {\\n        address borrower;\\n        address token;\\n        uint256 repayAssets;\\n        uint256 assetsRequired;\\n        uint256 assetsAllocated;\\n        uint256 sharesAllocated;\\n        uint256 deadlineAllocate;\\n        LoanStatus status;\\n    }\\n\\n    event LoanRequested(uint256 indexed loanId, address indexed borrower, address indexed token, uint256 assets);\\n\\n    event AllocatedTermAndFundOnLoan(uint256 indexed loanId, uint256 indexed termId, uint256 assets);\\n\\n    event LoanExecuted(uint256 indexed loanId, address indexed borrower, address indexed token, uint256 repayAssets);\\n\\n    event LoanRepaid(uint256 indexed loanId, address indexed repayUser);\\n\\n    event ClaimLoanProfit(uint256 indexed termId, uint256 indexed loanId, address indexed token, uint256 profit);\\n\\n    function requestLoan(address token, uint256 assets, uint256 deadline) external returns (uint256);\\n\\n    function allocateTermAndFundOnLoan(uint256 loanId, uint256 termId, uint256 assets) external;\\n\\n    function executeLoan(uint256 loanId) external;\\n\\n    function repay(uint256 loanId) external;\\n\\n    function claimLoanProfit(uint256 termId, uint256 loanId) external;\\n\\n    function getLoan(uint256 loanId) external view returns (Loan memory);\\n\\n    function getLoanTermAllocated(uint256 loanId, uint256 termId) external view returns (bool);\\n\\n    function getTermLoanAllocatedCounter(uint256 termId) external view returns (uint256);\\n\\n    function getTermAllocatedSharesOnLoan(uint256 loanId, uint256 termId, address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d7182cceb6ad29b38c65bf5cdb2d7fd85a12b91517992a8ef5eaac3c67270fd\",\"license\":\"MIT\"},\"contracts/interfaces/token/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC4626 as OzIERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IERC4626 is OzIERC4626 {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x622004f6e08f19a2d85d9af3129282385c583e22de170150f6b839d653095970\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Admin Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface IGovernable {\\n    function governor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa7f16dd2484971a7082382378ab66a44708776e53551b6a490cd170ee7783284\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IInitialize.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Initialize Interface\\ninterface IInitialize {\\n    function initialize(address loanManagerAddr, address lendingManagerAddr) external;\\n}\\n\",\"keccak256\":\"0x796f82f96c1b1bd5db3ed804417c14ba8abc4586eac468463a57aae74a8448c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620021633803806200216383398101604081905261003191610056565b600080546001600160a01b0319166001600160a01b0392909216919091179055610086565b60006020828403121561006857600080fd5b81516001600160a01b038116811461007f57600080fd5b9392505050565b6120cd80620000966000396000f3fe608060405234801561001057600080fd5b50600436106100fc5760003560e01c8063012d81b0146101015780630b50bd69146101345780630c340a24146101495780631945cd351461016357806319951ec51461018457806327d18127146101975780633392a8d2146101aa578063485cc955146101bd5780636a659cbc146101d05780636b4ee7f3146101e35780636f0f83f2146101f6578063760841c31461020957806384a9dc131461021c5780638ca0fca4146102bc57806394217ad1146102cf578063b3ccbcfe146102e2578063dd162070146102f5578063e1f1c4a714610359578063e763713114610375578063f2f34cc5146103a6575b600080fd5b61011461010f366004611c3b565b6103d1565b604080519384526020840192909252908201526060015b60405180910390f35b610147610142366004611c6b565b610493565b005b6000546001600160a01b03165b60405161012b9190611ca3565b610176610171366004611cb7565b6108d7565b60405190815260200161012b565b610176610192366004611c3b565b61097f565b6101476101a5366004611ce5565b610a92565b6101476101b8366004611d1e565b610c60565b6101476101cb366004611cb7565b610ddf565b6101476101de366004611c6b565b610f14565b6101476101f1366004611d37565b611514565b610176610204366004611c3b565b61174d565b610147610217366004611d67565b611808565b61028c61022a366004611d1e565b6040805160608101825260008082526020820181905291810191909152506040805160608101825260008381526003602081815284832080546001600160a01b0390811686526001820154838701529690935252600201549092169082015290565b6040805182516001600160a01b03908116825260208085015190830152928201519092169082015260600161012b565b6101766102ca366004611daf565b611a67565b600154610156906001600160a01b031681565b600254610156906001600160a01b031681565b61032f610303366004611d1e565b6003602052600090815260409020805460018201546002909201546001600160a01b0391821692911683565b604080516001600160a01b039485168152602081019390935292169181019190915260600161012b565b61036261271081565b60405161ffff909116815260200161012b565b610176610383366004611de4565b600460209081526000938452604080852082529284528284209052825290205481565b6101766103b4366004611cb7565b600560209081526000928352604080842090915290825290205481565b600154604051639dc6108f60e01b81526000918291829182916001600160a01b0390911690639dc6108f9061040a908890600401611ca3565b602060405180830381865afa158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044b9190611e1b565b6000968752600360208181526040808a2090920181528189206001600160a01b0393909316895291909152909520600181015481546002909201549097919650945092505050565b61049c83611b3d565b6104c15760405162461bcd60e51b81526004016104b890611e38565b60405180910390fd5b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f906104f2908690600401611ca3565b602060405180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611e1b565b60008581526003602081815260408084206004835281852033865283528185206001600160a01b038716808752908452828620548b875294820184528286209086529092528320805460029091015494955090939192916105949190611e8f565b600088815260038501602090815260408083206001600160a01b0389168452909152812060020154919250906105cc61271084611ea2565b6105d69190611eb9565b905060006127106105e78386611ea2565b6105f19190611eb9565b905060006105ff8286611e8f565b90508088111561065f5760405162461bcd60e51b8152602060048201526037602482015260008051602061203883398151915260448201527669656e742073686172657320746f20776974686472617760481b60648201526084016104b8565b60008a815260046020908152604080832033845282528083206001600160a01b038b168452909152812080548a9290610699908490611e8f565b90915550503360009081526005602090815260408083206001600160a01b038b168452909152812080548a92906106d1908490611e8f565b90915550600090506106e48a8a8d611a67565b60008c815260038901602090815260408083206001600160a01b038d168452909152812060010180549293508392909190610720908490611e8f565b909155505060008b815260038801602090815260408083206001600160a01b038c168452909152812080548b9290610759908490611e8f565b909155505060008b815260038801602090815260408083206001600160a01b038c168452909152812060020180548b9290610795908490611e8f565b909155505060405163a9059cbb60e01b81526000906001600160a01b038a169063a9059cbb906107cb9033908690600401611edb565b6020604051808303816000875af11580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e9190611ef4565b90508061082d5760405162461bcd60e51b81526004016104b890611f16565b60008c815260038901602090815260408083206001600160a01b038d16845290915290206002015461087b5760008c8152600489016020526040812080549161087583611f55565b91905055505b8a6001600160a01b0316336001600160a01b03168d7f326dc8411111ba4168dffd4e3444c739dac4ceb50b5780114b509bf84afe7caf8d6040516108c191815260200190565b60405180910390a4505050505050505050505050565b600154604051639dc6108f60e01b815260009182916001600160a01b0390911690639dc6108f9061090c908690600401611ca3565b602060405180830381865afa158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d9190611e1b565b6001600160a01b0380861660009081526005602090815260408083209390941682529190915220549150505b92915050565b6000803383604051602001610995929190611f6c565b6040516020818303038152906040528051906020012060001c90506109b981611b3d565b15610a105760405162461bcd60e51b815260206004820152603360248201526000805160206120788339815191526044820152727465726d20616c72656164792065786973747360681b60648201526084016104b8565b600081815260036020526040908190208054336001600160a01b03199182168117835560018301889055600290920180549091166001600160a01b038716179055905182917f075476444cfe3746081038022cbda9fa5490ae8f5d3d26bc5c7ba041bc285aa591610a8391908890611edb565b60405180910390a29392505050565b6002546001600160a01b03163314610abc5760405162461bcd60e51b81526004016104b890611f86565b610ac583611b3d565b610ae15760405162461bcd60e51b81526004016104b890611e38565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f90610b12908590600401611ca3565b602060405180830381865afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b539190611e1b565b600085815260036020818152604080842092830182528084206001600160a01b03861685529091529091205491925090841115610bdf5760405162461bcd60e51b8152602060048201526036602482015260008051602061203883398151915260448201527569656e7420646973706f7361626c652073686172657360501b60648201526084016104b8565b600085815260038201602090815260408083206001600160a01b038616845290915281208054869290610c13908490611e8f565b90915550506040518481526001600160a01b0384169086907f83e6aebf4e070ea8eb15d11aa9b81cc0f2744016599a71f228b8e448fcdc7daa906020015b60405180910390a35050505050565b60008181526003602052604090205481906001600160a01b03163314610cd75760405162461bcd60e51b815260206004820152602660248201527f53746f726d6269744c656e64696e674d616e616765723a206e6f74207465726d6044820152651037bbb732b960d11b60648201526084016104b8565b610ce082611b3d565b610cfc5760405162461bcd60e51b81526004016104b890611e38565b600082815260036020908152604080832060040190915290205415610d835760405162461bcd60e51b815260206004820152603760248201527f53746f726d6269744c656e64696e674d616e616765723a207465726d20686173604482015276206e6f6e207a65726f20746f6b656e2062616c616e636560481b60648201526084016104b8565b60008281526003602052604080822080546001600160a01b03199081168255600182018490556002909101805490911690555183917f56ba0528c061aa3f9bdc25f24ff3ea3271635507b07b8f5feeb28a7fa435517391a25050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610e245750825b90506000826001600160401b03166001148015610e405750303b155b905081158015610e4e575080155b15610e6c5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315610e9557845460ff60401b1916600160401b1785555b600180546001600160a01b03808a166001600160a01b03199283161790925560028054928916929091169190911790558315610f0b57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610f1f838383611b5a565b610f815760405162461bcd60e51b815260206004820152602d60248201527f53746f726d6269744c656e64696e674d616e616765723a206265666f7265206460448201526c195c1bdcda5d0819985a5b1959609a1b60648201526084016104b8565b6001546040516375151b6360e01b81526001600160a01b03909116906375151b6390610fb1908590600401611ca3565b602060405180830381865afa158015610fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff29190611ef4565b6110525760405162461bcd60e51b815260206004820152602b60248201527f53746f726d6269744c656e64696e674d616e616765723a20746f6b656e206e6f60448201526a1d081cdd5c1c1bdc9d195960aa1b60648201526084016104b8565b61105b83611b3d565b6110775760405162461bcd60e51b81526004016104b890611e38565b6002546040516342edaecf60e01b8152600481018590526001600160a01b03909116906342edaecf90602401602060405180830381865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e49190611fce565b156111505760405162461bcd60e51b815260206004820152603660248201527f53746f726d6269744c656e64696e674d616e616765723a207465726d20616c7260448201527532b0b23c9030b63637b1b0ba32b2103a37903637b0b760511b60648201526084016104b8565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f90611181908690600401611ca3565b602060405180830381865afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190611e1b565b6001546040516351b16bc160e11b81529192506000916001600160a01b039091169063a362d782906111fa9087903390600401611f6c565b602060405180830381865afa158015611217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123b9190611fce565b90508281101561129f5760405162461bcd60e51b815260206004820152602960248201527f53746f726d6269744c656e64696e674d616e616765723a206e6f7420656e6f7560448201526867682073686172657360b81b60648201526084016104b8565b6040516323b872dd60e01b81526000906001600160a01b038416906323b872dd906112d290339030908990600401611fe7565b6020604051808303816000875af11580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113159190611ef4565b9050806113345760405162461bcd60e51b81526004016104b890611f16565b600086815260036020818152604080842092830182528084206001600160a01b0388168552909152909120600101548061138a57600088815260048301602052604081208054916113848361200b565b91905055505b600088815260046020908152604080832033845282528083206001600160a01b0389168452909152812080548892906113c4908490612024565b90915550503360009081526005602090815260408083206001600160a01b0389168452909152812054906113f88883612024565b3360009081526005602090815260408083206001600160a01b038c168085529083528184208590558e8452600389018352818420908452909152812080549293508a92909190611449908490612024565b909155505060008a815260038501602090815260408083206001600160a01b038b168452909152812060010180548a9290611485908490612024565b909155505060008a815260038501602090815260408083206001600160a01b038b168452909152812060020180548a92906114c1908490612024565b90915550506040518881526001600160a01b038a169033908c907f977f88baa6bd7e1cc927d3c00627a91f0126cc476e9b6d3007342897d30c88879060200160405180910390a450505050505050505050565b6002546001600160a01b0316331461153e5760405162461bcd60e51b81526004016104b890611f86565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f9061156f908690600401611ca3565b602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b09190611e1b565b600154604051633e5541f160e01b81529192506000916001600160a01b0390911690633e5541f1906115e89087908790600401611edb565b602060405180830381865afa158015611605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116299190611fce565b60015460405163095ea7b360e01b81529192506001600160a01b038085169263095ea7b39261165e9216908590600401611edb565b6020604051808303816000875af115801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a19190611ef4565b50600154604051636b4ee7f360e01b81526001600160a01b0390911690636b4ee7f3906116d690889088908890600401611fe7565b600060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167f3733fa05f9ab2438e9b8352d03ce86b0b247d1d68c8cb3187f3d7f4b5954c71b85604051610c5191815260200190565b600154604051639dc6108f60e01b815260009182916001600160a01b0390911690639dc6108f90611782908690600401611ca3565b602060405180830381865afa15801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190611e1b565b600085815260036020818152604080842090920181528183206001600160a01b038516845290529020805460029091015491925061180091611e8f565b949350505050565b6002546001600160a01b031633146118325760405162461bcd60e51b81526004016104b890611f86565b61183b85611b3d565b6118575760405162461bcd60e51b81526004016104b890611e38565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f90611888908890600401611ca3565b602060405180830381865afa1580156118a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c99190611e1b565b6000878152600360205260408082208054915163a9059cbb60e01b8152939450926001600160a01b038086169263a9059cbb9261190e92909116908890600401611edb565b6020604051808303816000875af115801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190611ef4565b9050806119a85760405162461bcd60e51b815260206004820152603160248201526000805160206120588339815191526044820152701bc81d1c985b9cd9995c881c1c9bd99a5d607a1b60648201526084016104b8565b600088815260038301602090815260408083206001600160a01b0387168452909152812060010180548892906119df908490612024565b9091555050600088815260038301602090815260408083206001600160a01b038716845290915281208054879290611a18908490612024565b90915550506040518681526001600160a01b0388169089907f02658ac8539aed48343a600343b942d3b591d040b0c25ed0f26c95df5f0e24b69060200160405180910390a35050505050505050565b600154604051639dc6108f60e01b815260009182916001600160a01b0390911690639dc6108f90611a9c908890600401611ca3565b602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190611e1b565b600084815260036020818152604080842092830182528084206001600160a01b0386168552909152822060018101546002909101549394509092909181611b24848a611ea2565b611b2e9190611eb9565b955050505050505b9392505050565b6000908152600360205260409020546001600160a01b0316151590565b6000838152600360205260408120600201546001600160a01b0316801580611b8b57506001600160a01b0381166001145b15611b9a576001915050611b36565b604051634f4c631760e11b81523360048201526001600160a01b0385811660248301526044820187905260648201859052821690639e98c62e906084016020604051808303816000875af1158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a9190611ef4565b95945050505050565b6001600160a01b0381168114611c3857600080fd5b50565b60008060408385031215611c4e57600080fd5b823591506020830135611c6081611c23565b809150509250929050565b600080600060608486031215611c8057600080fd5b833592506020840135611c9281611c23565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b60008060408385031215611cca57600080fd5b8235611cd581611c23565b91506020830135611c6081611c23565b600080600060608486031215611cfa57600080fd5b83359250602084013591506040840135611d1381611c23565b809150509250925092565b600060208284031215611d3057600080fd5b5035919050565b600080600060608486031215611d4c57600080fd5b8335611d5781611c23565b92506020840135611c9281611c23565b600080600080600060a08688031215611d7f57600080fd5b853594506020860135611d9181611c23565b94979496505050506040830135926060810135926080909101359150565b600080600060608486031215611dc457600080fd5b8335611dcf81611c23565b95602085013595506040909401359392505050565b600080600060608486031215611df957600080fd5b833592506020840135611e0b81611c23565b91506040840135611d1381611c23565b600060208284031215611e2d57600080fd5b8151611b3681611c23565b60208082526033908201526000805160206120788339815191526040820152721d195c9b48191bd95cc81b9bdd08195e1a5cdd606a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561097957610979611e79565b808202811582820484141761097957610979611e79565b600082611ed657634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b600060208284031215611f0657600080fd5b81518015158114611b3657600080fd5b60208082526031908201526000805160206120588339815191526040820152706f207472616e736665722073686172657360781b606082015260800190565b600081611f6457611f64611e79565b506000190190565b6001600160a01b0392831681529116602082015260400190565b60208082526028908201527f53746f726d6269744c656e64696e674d616e616765723a206e6f74206c6f616e6040820152671036b0b730b3b2b960c11b606082015260800190565b600060208284031215611fe057600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001820161201d5761201d611e79565b5060010190565b8082018082111561097957610979611e7956fe53746f726d6269744c656e64696e674d616e616765723a20696e73756666696353746f726d6269744c656e64696e674d616e616765723a206661696c6564207453746f726d6269744c656e64696e674d616e616765723a206c656e64696e6720a2646970667358221220f3beede28f2b3a1a768ce9991a1f99d06fa258c0a5bc43c2b1a446581bcf794164736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100fc5760003560e01c8063012d81b0146101015780630b50bd69146101345780630c340a24146101495780631945cd351461016357806319951ec51461018457806327d18127146101975780633392a8d2146101aa578063485cc955146101bd5780636a659cbc146101d05780636b4ee7f3146101e35780636f0f83f2146101f6578063760841c31461020957806384a9dc131461021c5780638ca0fca4146102bc57806394217ad1146102cf578063b3ccbcfe146102e2578063dd162070146102f5578063e1f1c4a714610359578063e763713114610375578063f2f34cc5146103a6575b600080fd5b61011461010f366004611c3b565b6103d1565b604080519384526020840192909252908201526060015b60405180910390f35b610147610142366004611c6b565b610493565b005b6000546001600160a01b03165b60405161012b9190611ca3565b610176610171366004611cb7565b6108d7565b60405190815260200161012b565b610176610192366004611c3b565b61097f565b6101476101a5366004611ce5565b610a92565b6101476101b8366004611d1e565b610c60565b6101476101cb366004611cb7565b610ddf565b6101476101de366004611c6b565b610f14565b6101476101f1366004611d37565b611514565b610176610204366004611c3b565b61174d565b610147610217366004611d67565b611808565b61028c61022a366004611d1e565b6040805160608101825260008082526020820181905291810191909152506040805160608101825260008381526003602081815284832080546001600160a01b0390811686526001820154838701529690935252600201549092169082015290565b6040805182516001600160a01b03908116825260208085015190830152928201519092169082015260600161012b565b6101766102ca366004611daf565b611a67565b600154610156906001600160a01b031681565b600254610156906001600160a01b031681565b61032f610303366004611d1e565b6003602052600090815260409020805460018201546002909201546001600160a01b0391821692911683565b604080516001600160a01b039485168152602081019390935292169181019190915260600161012b565b61036261271081565b60405161ffff909116815260200161012b565b610176610383366004611de4565b600460209081526000938452604080852082529284528284209052825290205481565b6101766103b4366004611cb7565b600560209081526000928352604080842090915290825290205481565b600154604051639dc6108f60e01b81526000918291829182916001600160a01b0390911690639dc6108f9061040a908890600401611ca3565b602060405180830381865afa158015610427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044b9190611e1b565b6000968752600360208181526040808a2090920181528189206001600160a01b0393909316895291909152909520600181015481546002909201549097919650945092505050565b61049c83611b3d565b6104c15760405162461bcd60e51b81526004016104b890611e38565b60405180910390fd5b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f906104f2908690600401611ca3565b602060405180830381865afa15801561050f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105339190611e1b565b60008581526003602081815260408084206004835281852033865283528185206001600160a01b038716808752908452828620548b875294820184528286209086529092528320805460029091015494955090939192916105949190611e8f565b600088815260038501602090815260408083206001600160a01b0389168452909152812060020154919250906105cc61271084611ea2565b6105d69190611eb9565b905060006127106105e78386611ea2565b6105f19190611eb9565b905060006105ff8286611e8f565b90508088111561065f5760405162461bcd60e51b8152602060048201526037602482015260008051602061203883398151915260448201527669656e742073686172657320746f20776974686472617760481b60648201526084016104b8565b60008a815260046020908152604080832033845282528083206001600160a01b038b168452909152812080548a9290610699908490611e8f565b90915550503360009081526005602090815260408083206001600160a01b038b168452909152812080548a92906106d1908490611e8f565b90915550600090506106e48a8a8d611a67565b60008c815260038901602090815260408083206001600160a01b038d168452909152812060010180549293508392909190610720908490611e8f565b909155505060008b815260038801602090815260408083206001600160a01b038c168452909152812080548b9290610759908490611e8f565b909155505060008b815260038801602090815260408083206001600160a01b038c168452909152812060020180548b9290610795908490611e8f565b909155505060405163a9059cbb60e01b81526000906001600160a01b038a169063a9059cbb906107cb9033908690600401611edb565b6020604051808303816000875af11580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e9190611ef4565b90508061082d5760405162461bcd60e51b81526004016104b890611f16565b60008c815260038901602090815260408083206001600160a01b038d16845290915290206002015461087b5760008c8152600489016020526040812080549161087583611f55565b91905055505b8a6001600160a01b0316336001600160a01b03168d7f326dc8411111ba4168dffd4e3444c739dac4ceb50b5780114b509bf84afe7caf8d6040516108c191815260200190565b60405180910390a4505050505050505050505050565b600154604051639dc6108f60e01b815260009182916001600160a01b0390911690639dc6108f9061090c908690600401611ca3565b602060405180830381865afa158015610929573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094d9190611e1b565b6001600160a01b0380861660009081526005602090815260408083209390941682529190915220549150505b92915050565b6000803383604051602001610995929190611f6c565b6040516020818303038152906040528051906020012060001c90506109b981611b3d565b15610a105760405162461bcd60e51b815260206004820152603360248201526000805160206120788339815191526044820152727465726d20616c72656164792065786973747360681b60648201526084016104b8565b600081815260036020526040908190208054336001600160a01b03199182168117835560018301889055600290920180549091166001600160a01b038716179055905182917f075476444cfe3746081038022cbda9fa5490ae8f5d3d26bc5c7ba041bc285aa591610a8391908890611edb565b60405180910390a29392505050565b6002546001600160a01b03163314610abc5760405162461bcd60e51b81526004016104b890611f86565b610ac583611b3d565b610ae15760405162461bcd60e51b81526004016104b890611e38565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f90610b12908590600401611ca3565b602060405180830381865afa158015610b2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b539190611e1b565b600085815260036020818152604080842092830182528084206001600160a01b03861685529091529091205491925090841115610bdf5760405162461bcd60e51b8152602060048201526036602482015260008051602061203883398151915260448201527569656e7420646973706f7361626c652073686172657360501b60648201526084016104b8565b600085815260038201602090815260408083206001600160a01b038616845290915281208054869290610c13908490611e8f565b90915550506040518481526001600160a01b0384169086907f83e6aebf4e070ea8eb15d11aa9b81cc0f2744016599a71f228b8e448fcdc7daa906020015b60405180910390a35050505050565b60008181526003602052604090205481906001600160a01b03163314610cd75760405162461bcd60e51b815260206004820152602660248201527f53746f726d6269744c656e64696e674d616e616765723a206e6f74207465726d6044820152651037bbb732b960d11b60648201526084016104b8565b610ce082611b3d565b610cfc5760405162461bcd60e51b81526004016104b890611e38565b600082815260036020908152604080832060040190915290205415610d835760405162461bcd60e51b815260206004820152603760248201527f53746f726d6269744c656e64696e674d616e616765723a207465726d20686173604482015276206e6f6e207a65726f20746f6b656e2062616c616e636560481b60648201526084016104b8565b60008281526003602052604080822080546001600160a01b03199081168255600182018490556002909101805490911690555183917f56ba0528c061aa3f9bdc25f24ff3ea3271635507b07b8f5feeb28a7fa435517391a25050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610e245750825b90506000826001600160401b03166001148015610e405750303b155b905081158015610e4e575080155b15610e6c5760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b03191660011785558315610e9557845460ff60401b1916600160401b1785555b600180546001600160a01b03808a166001600160a01b03199283161790925560028054928916929091169190911790558315610f0b57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610f1f838383611b5a565b610f815760405162461bcd60e51b815260206004820152602d60248201527f53746f726d6269744c656e64696e674d616e616765723a206265666f7265206460448201526c195c1bdcda5d0819985a5b1959609a1b60648201526084016104b8565b6001546040516375151b6360e01b81526001600160a01b03909116906375151b6390610fb1908590600401611ca3565b602060405180830381865afa158015610fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff29190611ef4565b6110525760405162461bcd60e51b815260206004820152602b60248201527f53746f726d6269744c656e64696e674d616e616765723a20746f6b656e206e6f60448201526a1d081cdd5c1c1bdc9d195960aa1b60648201526084016104b8565b61105b83611b3d565b6110775760405162461bcd60e51b81526004016104b890611e38565b6002546040516342edaecf60e01b8152600481018590526001600160a01b03909116906342edaecf90602401602060405180830381865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e49190611fce565b156111505760405162461bcd60e51b815260206004820152603660248201527f53746f726d6269744c656e64696e674d616e616765723a207465726d20616c7260448201527532b0b23c9030b63637b1b0ba32b2103a37903637b0b760511b60648201526084016104b8565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f90611181908690600401611ca3565b602060405180830381865afa15801561119e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c29190611e1b565b6001546040516351b16bc160e11b81529192506000916001600160a01b039091169063a362d782906111fa9087903390600401611f6c565b602060405180830381865afa158015611217573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123b9190611fce565b90508281101561129f5760405162461bcd60e51b815260206004820152602960248201527f53746f726d6269744c656e64696e674d616e616765723a206e6f7420656e6f7560448201526867682073686172657360b81b60648201526084016104b8565b6040516323b872dd60e01b81526000906001600160a01b038416906323b872dd906112d290339030908990600401611fe7565b6020604051808303816000875af11580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113159190611ef4565b9050806113345760405162461bcd60e51b81526004016104b890611f16565b600086815260036020818152604080842092830182528084206001600160a01b0388168552909152909120600101548061138a57600088815260048301602052604081208054916113848361200b565b91905055505b600088815260046020908152604080832033845282528083206001600160a01b0389168452909152812080548892906113c4908490612024565b90915550503360009081526005602090815260408083206001600160a01b0389168452909152812054906113f88883612024565b3360009081526005602090815260408083206001600160a01b038c168085529083528184208590558e8452600389018352818420908452909152812080549293508a92909190611449908490612024565b909155505060008a815260038501602090815260408083206001600160a01b038b168452909152812060010180548a9290611485908490612024565b909155505060008a815260038501602090815260408083206001600160a01b038b168452909152812060020180548a92906114c1908490612024565b90915550506040518881526001600160a01b038a169033908c907f977f88baa6bd7e1cc927d3c00627a91f0126cc476e9b6d3007342897d30c88879060200160405180910390a450505050505050505050565b6002546001600160a01b0316331461153e5760405162461bcd60e51b81526004016104b890611f86565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f9061156f908690600401611ca3565b602060405180830381865afa15801561158c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b09190611e1b565b600154604051633e5541f160e01b81529192506000916001600160a01b0390911690633e5541f1906115e89087908790600401611edb565b602060405180830381865afa158015611605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116299190611fce565b60015460405163095ea7b360e01b81529192506001600160a01b038085169263095ea7b39261165e9216908590600401611edb565b6020604051808303816000875af115801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a19190611ef4565b50600154604051636b4ee7f360e01b81526001600160a01b0390911690636b4ee7f3906116d690889088908890600401611fe7565b600060405180830381600087803b1580156116f057600080fd5b505af1158015611704573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167f3733fa05f9ab2438e9b8352d03ce86b0b247d1d68c8cb3187f3d7f4b5954c71b85604051610c5191815260200190565b600154604051639dc6108f60e01b815260009182916001600160a01b0390911690639dc6108f90611782908690600401611ca3565b602060405180830381865afa15801561179f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c39190611e1b565b600085815260036020818152604080842090920181528183206001600160a01b038516845290529020805460029091015491925061180091611e8f565b949350505050565b6002546001600160a01b031633146118325760405162461bcd60e51b81526004016104b890611f86565b61183b85611b3d565b6118575760405162461bcd60e51b81526004016104b890611e38565b600154604051639dc6108f60e01b81526000916001600160a01b031690639dc6108f90611888908890600401611ca3565b602060405180830381865afa1580156118a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c99190611e1b565b6000878152600360205260408082208054915163a9059cbb60e01b8152939450926001600160a01b038086169263a9059cbb9261190e92909116908890600401611edb565b6020604051808303816000875af115801561192d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119519190611ef4565b9050806119a85760405162461bcd60e51b815260206004820152603160248201526000805160206120588339815191526044820152701bc81d1c985b9cd9995c881c1c9bd99a5d607a1b60648201526084016104b8565b600088815260038301602090815260408083206001600160a01b0387168452909152812060010180548892906119df908490612024565b9091555050600088815260038301602090815260408083206001600160a01b038716845290915281208054879290611a18908490612024565b90915550506040518681526001600160a01b0388169089907f02658ac8539aed48343a600343b942d3b591d040b0c25ed0f26c95df5f0e24b69060200160405180910390a35050505050505050565b600154604051639dc6108f60e01b815260009182916001600160a01b0390911690639dc6108f90611a9c908890600401611ca3565b602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190611e1b565b600084815260036020818152604080842092830182528084206001600160a01b0386168552909152822060018101546002909101549394509092909181611b24848a611ea2565b611b2e9190611eb9565b955050505050505b9392505050565b6000908152600360205260409020546001600160a01b0316151590565b6000838152600360205260408120600201546001600160a01b0316801580611b8b57506001600160a01b0381166001145b15611b9a576001915050611b36565b604051634f4c631760e11b81523360048201526001600160a01b0385811660248301526044820187905260648201859052821690639e98c62e906084016020604051808303816000875af1158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a9190611ef4565b95945050505050565b6001600160a01b0381168114611c3857600080fd5b50565b60008060408385031215611c4e57600080fd5b823591506020830135611c6081611c23565b809150509250929050565b600080600060608486031215611c8057600080fd5b833592506020840135611c9281611c23565b929592945050506040919091013590565b6001600160a01b0391909116815260200190565b60008060408385031215611cca57600080fd5b8235611cd581611c23565b91506020830135611c6081611c23565b600080600060608486031215611cfa57600080fd5b83359250602084013591506040840135611d1381611c23565b809150509250925092565b600060208284031215611d3057600080fd5b5035919050565b600080600060608486031215611d4c57600080fd5b8335611d5781611c23565b92506020840135611c9281611c23565b600080600080600060a08688031215611d7f57600080fd5b853594506020860135611d9181611c23565b94979496505050506040830135926060810135926080909101359150565b600080600060608486031215611dc457600080fd5b8335611dcf81611c23565b95602085013595506040909401359392505050565b600080600060608486031215611df957600080fd5b833592506020840135611e0b81611c23565b91506040840135611d1381611c23565b600060208284031215611e2d57600080fd5b8151611b3681611c23565b60208082526033908201526000805160206120788339815191526040820152721d195c9b48191bd95cc81b9bdd08195e1a5cdd606a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561097957610979611e79565b808202811582820484141761097957610979611e79565b600082611ed657634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03929092168252602082015260400190565b600060208284031215611f0657600080fd5b81518015158114611b3657600080fd5b60208082526031908201526000805160206120588339815191526040820152706f207472616e736665722073686172657360781b606082015260800190565b600081611f6457611f64611e79565b506000190190565b6001600160a01b0392831681529116602082015260400190565b60208082526028908201527f53746f726d6269744c656e64696e674d616e616765723a206e6f74206c6f616e6040820152671036b0b730b3b2b960c11b606082015260800190565b600060208284031215611fe057600080fd5b5051919050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006001820161201d5761201d611e79565b5060010190565b8082018082111561097957610979611e7956fe53746f726d6269744c656e64696e674d616e616765723a20696e73756666696353746f726d6269744c656e64696e674d616e616765723a206661696c6564207453746f726d6269744c656e64696e674d616e616765723a206c656e64696e6720a2646970667358221220f3beede28f2b3a1a768ce9991a1f99d06fa258c0a5bc43c2b1a446581bcf794164736f6c63430008150033",
  "devdoc": {
    "details": "Think of terms are minimal ERC4626, this contract is using word \"shares\" to represent ERC4626 assets, and \"weight\" to represent ERC4626 shares",
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "createLendingTerm(uint256,address)": {
        "details": "create a lending term",
        "params": {
          "comission": "comission rate",
          "hooks": "customizable hooks, reference uniswap v4 hooks"
        },
        "returns": {
          "_0": "id of the lending term"
        }
      },
      "depositToTerm(uint256,address,uint256)": {
        "details": "allow depositor to delegate shares to a lending term",
        "params": {
          "shares": "amount of shares to delegate",
          "termId": "id of the lending term",
          "token": "address of the token"
        }
      },
      "freezeTermShares(uint256,uint256,address)": {
        "details": "freeze the shares on term when allocated fund to loan"
      },
      "removeLendingTerm(uint256)": {
        "details": "remove a lending term",
        "params": {
          "id": "id of the lending term"
        }
      },
      "withdrawFromTerm(uint256,address,uint256)": {
        "details": "allow lender to decrease delegated shares to a lending term",
        "params": {
          "shares": "amount of shares to withdraw",
          "termId": "id of the lending term",
          "token": "address of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4153,
        "contract": "contracts/LendingManager.sol:StormbitLendingManager",
        "label": "_governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4156,
        "contract": "contracts/LendingManager.sol:StormbitLendingManager",
        "label": "assetManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IAssetManager)6503"
      },
      {
        "astId": 4159,
        "contract": "contracts/LendingManager.sol:StormbitLendingManager",
        "label": "loanManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILoanManager)7179"
      },
      {
        "astId": 4164,
        "contract": "contracts/LendingManager.sol:StormbitLendingManager",
        "label": "lendingTerms",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LendingTerm)6710_storage)"
      },
      {
        "astId": 4172,
        "contract": "contracts/LendingManager.sol:StormbitLendingManager",
        "label": "termUserDelegatedShares",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))"
      },
      {
        "astId": 4178,
        "contract": "contracts/LendingManager.sol:StormbitLendingManager",
        "label": "userTotalDelegatedShares",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAssetManager)6503": {
        "encoding": "inplace",
        "label": "contract IAssetManager",
        "numberOfBytes": "20"
      },
      "t_contract(IHooks)6375": {
        "encoding": "inplace",
        "label": "contract IHooks",
        "numberOfBytes": "20"
      },
      "t_contract(ILoanManager)7179": {
        "encoding": "inplace",
        "label": "contract ILoanManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Balances)6691_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILendingManager.Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)6691_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Balances)6691_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct ILendingManager.Balances))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Balances)6691_storage)"
      },
      "t_mapping(t_uint256,t_struct(LendingTerm)6710_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ILendingManager.LendingTerm)",
        "numberOfBytes": "32",
        "value": "t_struct(LendingTerm)6710_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Balances)6691_storage": {
        "encoding": "inplace",
        "label": "struct ILendingManager.Balances",
        "members": [
          {
            "astId": 6686,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "available",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6688,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "weight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6690,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "shares",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LendingTerm)6710_storage": {
        "encoding": "inplace",
        "label": "struct ILendingManager.LendingTerm",
        "members": [
          {
            "astId": 6693,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6695,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "comission",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6698,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "hooks",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IHooks)6375"
          },
          {
            "astId": 6705,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "termBalances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Balances)6691_storage))"
          },
          {
            "astId": 6709,
            "contract": "contracts/LendingManager.sol:StormbitLendingManager",
            "label": "termNonZeroTokenCounter",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}