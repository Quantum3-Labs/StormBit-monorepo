{
  "address": "0x89B02aa3Ad8Af52Fc62244d7b1902dE5B291684b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialGovernor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "BorrowerWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "RemoveToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesBurned",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "borrowerWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "depositFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getVaultToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "loanManagerAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendingManagerAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingManager",
      "outputs": [
        {
          "internalType": "contract ILendingManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanManager",
      "outputs": [
        {
          "internalType": "contract ILoanManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7969ea5b878c1099afac1da57168dbb113a3d093e7d52579fecea8da89951d0",
  "receipt": {
    "to": null,
    "from": "0xDe3089d40F3491De794fBb1ECA109fAc36F889d0",
    "contractAddress": "0x89B02aa3Ad8Af52Fc62244d7b1902dE5B291684b",
    "transactionIndex": 1,
    "gasUsed": "4402932",
    "logsBloom": "0x
    "blockHash": "0x8aaf912f560eca9aa0f3468bba6e49fe14c69f57a646824608d0a84b7cfb7fef",
    "transactionHash": "0xe7969ea5b878c1099afac1da57168dbb113a3d093e7d52579fecea8da89951d0",
    "logs": [],
    "blockNumber": 59963976,
    "cumulativeGasUsed": "4402932",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDe3089d40F3491De794fBb1ECA109fAc36F889d0"
  ],
  "numDeployments": 1,
  "solcInputHash": "fc88f2785a8cc64f484af0517b95c10f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialGovernor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"BorrowerWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"RemoveToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurned\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"borrowerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getVaultToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanManagerAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingManagerAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingManager\",\"outputs\":[{\"internalType\":\"contract ILendingManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanManager\",\"outputs\":[{\"internalType\":\"contract ILoanManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Quantum3 Labs\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Withdraw(address,address,uint256,uint256)\":{\"details\":\"note that withdraw event uses assets instead of shares\"}},\"kind\":\"dev\",\"methods\":{\"addToken(address)\":{\"details\":\"allow governor to add a new token\",\"params\":{\"token\":\"address of the token\"}},\"borrowerWithdraw(address,address,uint256)\":{\"details\":\"call by lending manager, use for execute loan, redeem shares for borrower\"},\"convertToAssets(address,uint256)\":{\"details\":\"convert shares to assets based on the vault\"},\"convertToShares(address,uint256)\":{\"details\":\"convert assets to shares based on the vault\"},\"deposit(address,uint256)\":{\"details\":\"allow depositor deposit assets to the vault\",\"params\":{\"assets\":\"amount of assets to deposit\",\"token\":\"address of the token\"}},\"depositFrom(address,uint256,address,address)\":{\"details\":\"same function as deposit, but allow user to deposit on behalf of another user\"},\"getUserShares(address,address)\":{\"details\":\"get user shares on specific vault\"},\"getVaultToken(address)\":{\"details\":\"get vault token  address\"},\"initialize(address,address)\":{\"details\":\"used to initialize loan and lend manager address\",\"params\":{\"lendingManagerAddr\":\"address of the lending manager\",\"loanManagerAddr\":\"address of the loan manager\"}},\"isTokenSupported(address)\":{\"details\":\"check if token is supported\",\"params\":{\"token\":\"address of the token\"}},\"removeToken(address)\":{\"details\":\"allow governor to remove the support of a token\",\"params\":{\"token\":\"address of the token\"}},\"withdraw(address,uint256)\":{\"details\":\"note that we dont require the token to be whitelisted\"}},\"title\":\"Stormbit Asset Manager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"entrypoint for all asset management operations\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AssetManager.sol\":\"StormbitAssetManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"../../../interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeCall(IERC20Metadata.decimals, ())\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/AssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport {IERC20} from \\\"./interfaces/token/IERC20.sol\\\";\\nimport {IERC4626} from \\\"./interfaces/token/IERC4626.sol\\\";\\nimport {IGovernable} from \\\"./interfaces/utils/IGovernable.sol\\\";\\nimport {IInitialize} from \\\"./interfaces/utils/IInitialize.sol\\\";\\nimport {BaseVault} from \\\"./vaults/BaseVault.sol\\\";\\nimport {IAssetManager} from \\\"./interfaces/managers/asset/IAssetManager.sol\\\";\\nimport {ILoanManager} from \\\"./interfaces/managers/loan/ILoanManager.sol\\\";\\nimport {ILendingManager} from \\\"./interfaces/managers/lending/ILendingManager.sol\\\";\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Asset Manager\\n/// @notice entrypoint for all asset management operations\\n\\ncontract StormbitAssetManager is Initializable, IGovernable, IInitialize, IAssetManager {\\n    using Math for uint256;\\n\\n    address private _governor;\\n    ILoanManager public loanManager;\\n    ILendingManager public lendingManager;\\n\\n    mapping(address token => bool isSupported) tokens; // check if token is supported\\n    mapping(address token => address vaultToken) vaultTokens; // token to vault mapping\\n\\n    constructor(address initialGovernor) {\\n        _governor = initialGovernor;\\n    }\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == _governor, \\\"StormbitAssetManager: not governor\\\");\\n        _;\\n    }\\n\\n    modifier onlyLoanManager() {\\n        require(msg.sender == address(loanManager), \\\"StormbitAssetManager: not loan manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyLendingManager() {\\n        require(msg.sender == address(lendingManager), \\\"StormbitAssetManager: not lending manager\\\");\\n        _;\\n    }\\n\\n    // -----------------------------------------\\n    // -------- PUBLIC FUNCTIONS ---------------\\n    // -----------------------------------------\\n\\n    /// @dev used to initialize loan and lend manager address\\n    /// @param loanManagerAddr address of the loan manager\\n    /// @param lendingManagerAddr address of the lending manager\\n    function initialize(address loanManagerAddr, address lendingManagerAddr) public override initializer {\\n        loanManager = ILoanManager(loanManagerAddr);\\n        lendingManager = ILendingManager(lendingManagerAddr);\\n    }\\n\\n    /// @dev allow depositor deposit assets to the vault\\n    /// @param token address of the token\\n    /// @param assets amount of assets to deposit\\n    function deposit(address token, uint256 assets) public override {\\n        _checkTokenSupported(token);\\n        address vaultToken = vaultTokens[token]; // get the corresponding vault\\n        // first make sure can transfer user token to manager\\n        // todo: use safe transfer\\n        bool isSuccess = IERC20(token).transferFrom(msg.sender, address(this), assets);\\n        if (!isSuccess) {\\n            revert(\\\"StormbitAssetManager: transfer failed\\\");\\n        }\\n        IERC20(token).approve(vaultToken, assets);\\n        IERC4626(vaultToken).deposit(assets, msg.sender);\\n        emit Deposit(msg.sender, token, assets);\\n    }\\n\\n    /// @dev same function as deposit, but allow user to deposit on behalf of another user\\n    function depositFrom(address token, uint256 assets, address depositor, address receiver) public override {\\n        _checkTokenSupported(token);\\n        address vaultToken = vaultTokens[token]; // get the corresponding vault\\n        // first make sure can transfer user token to manager\\n        bool isSuccess = IERC20(token).transferFrom(depositor, address(this), assets);\\n        if (!isSuccess) {\\n            revert(\\\"StormbitAssetManager: transfer failed\\\");\\n        }\\n        IERC20(token).approve(vaultToken, assets);\\n        IERC4626(vaultToken).deposit(assets, receiver);\\n        emit Deposit(receiver, token, assets);\\n    }\\n\\n    /// @dev note that we dont require the token to be whitelisted\\n    function withdraw(address token, uint256 assets) public override {\\n        // withdraw here is withdraw from shares to asset\\n        _checkTokenSupported(token);\\n        address vaultToken = vaultTokens[token];\\n        uint256 sharesBurned = IERC4626(vaultToken).withdraw(assets, msg.sender, msg.sender);\\n        emit Withdraw(msg.sender, vaultToken, assets, sharesBurned);\\n    }\\n\\n    /// @dev call by lending manager, use for execute loan, redeem shares for borrower\\n    function borrowerWithdraw(address borrower, address token, uint256 assets) public override onlyLendingManager {\\n        address vaultToken = getVaultToken(token);\\n        IERC4626(vaultToken).withdraw(assets, borrower, msg.sender);\\n        emit BorrowerWithdraw(borrower, token, assets);\\n    }\\n\\n    /// @dev allow governor to add a new token\\n    /// @param token address of the token\\n    function addToken(address token) public override onlyGovernor {\\n        if (tokens[token]) return;\\n        tokens[token] = true;\\n        // deploy the vault\\n        BaseVault vault = new BaseVault(\\n            IERC20(token),\\n            address(this),\\n            string(abi.encodePacked(\\\"Stormbit \\\", IERC20(token).symbol())),\\n            string(abi.encodePacked(\\\"s\\\", IERC20(token).symbol()))\\n        );\\n        // update the mapping\\n        vaultTokens[token] = address(vault);\\n        emit AddToken(token, address(vault));\\n    }\\n\\n    /// @dev allow governor to remove the support of a token\\n    /// @param token address of the token\\n    function removeToken(address token) public override onlyGovernor {\\n        // get the vault address\\n        address vaultToken = vaultTokens[token];\\n        // check if vault is empty\\n        require(IERC4626(vaultToken).totalSupply() == 0, \\\"StormbitAssetManager: vault not empty\\\");\\n        tokens[token] = false;\\n        emit RemoveToken(token, vaultToken);\\n    }\\n\\n    // -----------------------------------------\\n    // ----------- INTERNAL FUNCTIONS ----------\\n    // -----------------------------------------\\n    function _checkTokenSupported(address token) internal view {\\n        require(tokens[token], \\\"StormbitAssetManager: token not supported\\\");\\n    }\\n\\n    // -----------------------------------------\\n    // -------- PUBLIC GETTER FUNCTIONS --------\\n    // -----------------------------------------\\n\\n    function governor() public view override returns (address) {\\n        return _governor;\\n    }\\n\\n    /// @dev check if token is supported\\n    /// @param token address of the token\\n    function isTokenSupported(address token) public view override returns (bool) {\\n        return tokens[token];\\n    }\\n\\n    /// @dev get vault token  address\\n    function getVaultToken(address token) public view override returns (address) {\\n        return vaultTokens[token];\\n    }\\n\\n    /// @dev get user shares on specific vault\\n    function getUserShares(address token, address user) public view override returns (uint256) {\\n        address vaultToken = vaultTokens[token];\\n        IERC4626 vault = IERC4626(vaultToken);\\n        return vault.balanceOf(user);\\n    }\\n\\n    /// @dev convert assets to shares based on the vault\\n    function convertToShares(address token, uint256 assets) public view override returns (uint256) {\\n        address vaultToken = vaultTokens[token];\\n        IERC4626 vault = IERC4626(vaultToken);\\n        return vault.convertToShares(assets);\\n    }\\n\\n    /// @dev convert shares to assets based on the vault\\n    function convertToAssets(address token, uint256 shares) public view override returns (uint256) {\\n        address vaultToken = vaultTokens[token];\\n        IERC4626 vault = IERC4626(vaultToken);\\n        return vault.convertToAssets(shares);\\n    }\\n}\\n\",\"keccak256\":\"0x6afeb75932fc7f3134a71a66cbe8f901987363a18cd07f329f6d8ae21a14a868\",\"license\":\"MIT\"},\"contracts/interfaces/hooks/IHooks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Hooks Interface\\ninterface IHooks {\\n    function beforeDepositToTerm(address from, address token, uint256 termId, uint256 shares) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc990c6c6da8481dddbcd1941ee76c6060fa2d79fe00ee4c4530be4d9857312fa\",\"license\":\"MIT\"},\"contracts/interfaces/managers/asset/IAssetManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Asset Manager Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface IAssetManager {\\n    event AddToken(address indexed token, address indexed vault);\\n\\n    event RemoveToken(address indexed token, address indexed vault);\\n\\n    event Deposit(address indexed user, address indexed token, uint256 assets);\\n\\n    /// @dev note that withdraw event uses assets instead of shares\\n    event Withdraw(address indexed user, address indexed vaultToken, uint256 assets, uint256 sharesBurned);\\n\\n    event BorrowerWithdraw(address indexed borrower, address indexed token, uint256 shares);\\n\\n    function addToken(address _asset) external;\\n\\n    function removeToken(address _asset) external;\\n\\n    function isTokenSupported(address token) external view returns (bool);\\n\\n    function getVaultToken(address token) external view returns (address);\\n\\n    function getUserShares(address token, address user) external view returns (uint256);\\n\\n    function convertToShares(address token, uint256 assets) external view returns (uint256);\\n\\n    function convertToAssets(address token, uint256 shares) external view returns (uint256);\\n\\n    function deposit(address token, uint256 assets) external;\\n\\n    function depositFrom(address token, uint256 assets, address depositor, address receiver) external;\\n\\n    function withdraw(address token, uint256 shares) external;\\n\\n    function borrowerWithdraw(address borrower, address token, uint256 assets) external;\\n}\\n\",\"keccak256\":\"0x1592b04aa36f3055611d05739d3a8a891e69de4a759640641fbf9cacfbbf8428\",\"license\":\"MIT\"},\"contracts/interfaces/managers/lending/ILendingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IHooks} from \\\"../../hooks/IHooks.sol\\\";\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Lending Manager Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface ILendingManager {\\n    struct Balances {\\n        uint256 available; // available for tracking disposable shares\\n        uint256 weight; // weight is shares + profit\\n        uint256 shares; // shares is weight but without profit\\n    }\\n\\n    struct LendingTerm {\\n        address owner;\\n        uint256 comission; // TODO add balances and other ERC4626 custom fields\\n        IHooks hooks;\\n        mapping(uint256 termId => mapping(address vaultToken => Balances balances)) termBalances; // total shares controlled by the term owner\\n        mapping(uint256 termId => uint256 nonZeroTokenBalanceCounter) termNonZeroTokenCounter; // track non zero token counter\\n    }\\n\\n    struct LendingTermMetadata {\\n        address owner;\\n        uint256 comission;\\n        IHooks hooks;\\n    }\\n\\n    event LendingTermCreated(uint256 indexed id, address lender, uint256 comission);\\n\\n    event LendingTermRemoved(uint256 indexed id);\\n\\n    event BorrowerWithdraw(address indexed borrower, address indexed token, uint256 assets);\\n\\n    event DepositToTerm(uint256 indexed id, address indexed user, address indexed token, uint256 shares);\\n\\n    event WithdrawFromTerm(uint256 indexed id, address indexed user, address indexed token, uint256 shares);\\n\\n    event FreezeSharesOnTerm(uint256 indexed termId, address indexed token, uint256 shares);\\n\\n    event DistributeProfit(uint256 indexed termId, address indexed token, uint256 profit);\\n\\n    function createLendingTerm(uint256 comission, IHooks hooks) external returns (uint256);\\n\\n    function removeLendingTerm(uint256 id) external;\\n\\n    function borrowerWithdraw(address borrower, address token, uint256 assets) external;\\n\\n    function depositToTerm(uint256 termId, address token, uint256 shares) external;\\n\\n    function withdrawFromTerm(uint256 termId, address token, uint256 requestedDecrease) external;\\n\\n    function freezeTermShares(uint256 termId, uint256 shares, address token) external;\\n\\n    function distributeProfit(uint256 termId, address token, uint256 weight, uint256 shares, uint256 ownerProfit)\\n        external;\\n\\n    function getLendingTerm(uint256 id) external returns (LendingTermMetadata memory);\\n\\n    function getTermFreezedShares(uint256 termId, address token) external view returns (uint256);\\n\\n    function getUserTotalDelegatedShares(address user, address token) external view returns (uint256);\\n\\n    function getLendingTermBalances(uint256 termId, address token) external view returns (uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x7a65150775050fd55e09cb63a2c35fc107939e0ead0066d064035308a1507869\",\"license\":\"MIT\"},\"contracts/interfaces/managers/loan/ILoanManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Loan Manager Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface ILoanManager {\\n    enum LoanStatus {\\n        Pending,\\n        Active,\\n        Repaid,\\n        Cancelled\\n    }\\n\\n    struct Loan {\\n        address borrower;\\n        address token;\\n        uint256 repayAssets;\\n        uint256 assetsRequired;\\n        uint256 assetsAllocated;\\n        uint256 sharesAllocated;\\n        uint256 deadlineAllocate;\\n        LoanStatus status;\\n    }\\n\\n    event LoanRequested(uint256 indexed loanId, address indexed borrower, address indexed token, uint256 assets);\\n\\n    event AllocatedTermAndFundOnLoan(uint256 indexed loanId, uint256 indexed termId, uint256 assets);\\n\\n    event LoanExecuted(uint256 indexed loanId, address indexed borrower, address indexed token, uint256 repayAssets);\\n\\n    event LoanRepaid(uint256 indexed loanId, address indexed repayUser);\\n\\n    event ClaimLoanProfit(uint256 indexed termId, uint256 indexed loanId, address indexed token, uint256 profit);\\n\\n    function requestLoan(address token, uint256 assets, uint256 deadline) external returns (uint256);\\n\\n    function allocateTermAndFundOnLoan(uint256 loanId, uint256 termId, uint256 assets) external;\\n\\n    function executeLoan(uint256 loanId) external;\\n\\n    function repay(uint256 loanId) external;\\n\\n    function claimLoanProfit(uint256 termId, uint256 loanId) external;\\n\\n    function getLoan(uint256 loanId) external view returns (Loan memory);\\n\\n    function getLoanTermAllocated(uint256 loanId, uint256 termId) external view returns (bool);\\n\\n    function getTermLoanAllocatedCounter(uint256 termId) external view returns (uint256);\\n\\n    function getTermAllocatedSharesOnLoan(uint256 loanId, uint256 termId, address token)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d7182cceb6ad29b38c65bf5cdb2d7fd85a12b91517992a8ef5eaac3c67270fd\",\"license\":\"MIT\"},\"contracts/interfaces/token/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20 as OzIERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20 is OzIERC20 {\\n    function symbol() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0d3ae8a5d1eb74b5d173b6821077f07d5d5091dad2c54edeb3e991d3948c14fd\",\"license\":\"MIT\"},\"contracts/interfaces/token/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC4626 as OzIERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IERC4626 is OzIERC4626 {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x622004f6e08f19a2d85d9af3129282385c583e22de170150f6b839d653095970\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Admin Interface\\n/// TODO split into different interfaces according to funcionality\\ninterface IGovernable {\\n    function governor() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa7f16dd2484971a7082382378ab66a44708776e53551b6a490cd170ee7783284\",\"license\":\"MIT\"},\"contracts/interfaces/utils/IInitialize.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @author Quantum3 Labs\\n/// @title Stormbit Initialize Interface\\ninterface IInitialize {\\n    function initialize(address loanManagerAddr, address lendingManagerAddr) external;\\n}\\n\",\"keccak256\":\"0x796f82f96c1b1bd5db3ed804417c14ba8abc4586eac468463a57aae74a8448c2\",\"license\":\"MIT\"},\"contracts/vaults/BaseVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {ERC4626} from \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {StormbitAssetManager} from \\\"../AssetManager.sol\\\";\\n\\ncontract BaseVault is ERC4626 {\\n    error OnlyAssetManager();\\n\\n    StormbitAssetManager private assetManager;\\n\\n    constructor(IERC20 _token, address assetManagerAddr, string memory _name, string memory _symbol)\\n        ERC4626(_token)\\n        ERC20(_name, _symbol)\\n    {\\n        assetManager = StormbitAssetManager(assetManagerAddr);\\n    }\\n\\n    modifier onlyAssetManager() {\\n        if (msg.sender != address(assetManager)) revert OnlyAssetManager();\\n        _;\\n    }\\n\\n    function deposit(uint256 assets, address receiver) public override onlyAssetManager returns (uint256) {\\n        return super.deposit(assets, receiver);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public override onlyAssetManager returns (uint256) {\\n        return super.mint(shares, receiver);\\n    }\\n\\n    function withdraw(uint256 assets, address receiver, address owner)\\n        public\\n        override\\n        onlyAssetManager\\n        returns (uint256)\\n    {\\n        return super.withdraw(assets, receiver, owner);\\n    }\\n\\n    function redeem(uint256 shares, address receiver, address owner)\\n        public\\n        override\\n        onlyAssetManager\\n        returns (uint256)\\n    {\\n        return super.redeem(shares, receiver, owner);\\n    }\\n\\n    function depositToStrategy() external onlyAssetManager {\\n        // some logic\\n    }\\n\\n    function withdrawFromStrategy() external onlyAssetManager {\\n        // some logic\\n    }\\n\\n    function _decimalsOffset() internal view override returns (uint8) {\\n        return 8;\\n    }\\n}\\n\",\"keccak256\":\"0x2f6d8dc26a82455002fc263b626534300dbc0cc244a1f9266d30e362ccc3abcf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612cec380380612cec83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b612c59806100936000396000f3fe60806040523480156200001157600080fd5b5060043610620000d65760003560e01c80630c340a2414620000db5780632ab5c0a514620001005780633e5541f1146200011957806347e7ef24146200013f578063485cc955146200015657806350603df3146200016d5780635fa7b58414620001845780636b4ee7f3146200019b57806375151b6314620001b25780639dc6108f14620001f25780639e3b77af1462000209578063a362d782146200021d578063b3ccbcfe1462000234578063d48bfca71462000248578063f3fef3a3146200025f575b600080fd5b6000546001600160a01b03165b604051620000f7919062000ede565b60405180910390f35b620001176200011136600462000f0f565b62000276565b005b620001306200012a36600462000f63565b6200046c565b604051908152602001620000f7565b620001176200015036600462000f63565b62000501565b620001176200016736600462000f90565b620006df565b620001306200017e36600462000f63565b6200081a565b620001176200019536600462000fc8565b62000862565b62000117620001ac36600462000fed565b620009b8565b620001e1620001c336600462000fc8565b6001600160a01b031660009081526003602052604090205460ff1690565b6040519015158152602001620000f7565b620000e86200020336600462000fc8565b62000af5565b600254620000e8906001600160a01b031681565b620001306200022e36600462000f90565b62000b13565b600154620000e8906001600160a01b031681565b620001176200025936600462000fc8565b62000b58565b620001176200027036600462000f63565b62000d76565b620002818462000e54565b6001600160a01b0380851660008181526004602081905260408083205490516323b872dd60e01b81529416939192916323b872dd91620002c891889130918b91016200102e565b6020604051808303816000875af1158015620002e8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030e919062001052565b905080620003395760405162461bcd60e51b8152600401620003309062001076565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b390620003699085908990600401620010bb565b6020604051808303816000875af115801562000389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003af919062001052565b50604051636e553f6560e01b81526001600160a01b03831690636e553f6590620003e09088908790600401620010d4565b6020604051808303816000875af115801562000400573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004269190620010eb565b50856001600160a01b0316836001600160a01b031660008051602062002c04833981519152876040516200045c91815260200190565b60405180910390a3505050505050565b6001600160a01b0380831660009081526004602081905260408083205490516363737ac960e11b8152929316918291829163c6e6f59291620004b49188910190815260200190565b602060405180830381865afa158015620004d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f89190620010eb565b95945050505050565b6200050c8262000e54565b6001600160a01b0380831660008181526004602081905260408083205490516323b872dd60e01b81529416939192916323b872dd916200055391339130918991016200102e565b6020604051808303816000875af115801562000573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000599919062001052565b905080620005bb5760405162461bcd60e51b8152600401620003309062001076565b60405163095ea7b360e01b81526001600160a01b0385169063095ea7b390620005eb9085908790600401620010bb565b6020604051808303816000875af11580156200060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000631919062001052565b50604051636e553f6560e01b81526001600160a01b03831690636e553f6590620006629086903390600401620010d4565b6020604051808303816000875af115801562000682573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a89190620010eb565b506040518381526001600160a01b03851690339060008051602062002c04833981519152906020015b60405180910390a350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015620007255750825b90506000826001600160401b03166001148015620007425750303b155b90508115801562000751575080155b15620007705760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b031916600117855583156200079a57845460ff60401b1916600160401b1785555b600180546001600160a01b03808a166001600160a01b031992831617909255600280549289169290911691909117905583156200081157845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6001600160a01b0380831660009081526004602081905260408083205490516303d1689d60e11b815292931691829182916307a2d13a91620004b49188910190815260200190565b6000546001600160a01b031633146200088f5760405162461bcd60e51b8152600401620003309062001105565b6001600160a01b038082166000908152600460208181526040928390205483516318160ddd60e01b8152935194169384936318160ddd938181019392918290030181865afa158015620008e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090c9190620010eb565b15620009695760405162461bcd60e51b815260206004820152602560248201527f53746f726d62697441737365744d616e616765723a207661756c74206e6f7420604482015264656d70747960d81b606482015260840162000330565b6001600160a01b03808316600081815260036020526040808220805460ff1916905551928416927f39dcd754ec63af4b82c4c569ff1b6b4e55a8038e6545844747e54f2f2d4e8e509190a35050565b6002546001600160a01b0316331462000a265760405162461bcd60e51b815260206004820152602960248201527f53746f726d62697441737365744d616e616765723a206e6f74206c656e64696e604482015268339036b0b730b3b2b960b91b606482015260840162000330565b600062000a338362000af5565b604051632d182be560e21b81529091506001600160a01b0382169063b460af949062000a689085908890339060040162001147565b6020604051808303816000875af115801562000a88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aae9190620010eb565b50826001600160a01b0316846001600160a01b03167f3733fa05f9ab2438e9b8352d03ce86b0b247d1d68c8cb3187f3d7f4b5954c71b84604051620006d191815260200190565b6001600160a01b039081166000908152600460205260409020541690565b6001600160a01b0380831660009081526004602081905260408083205490516370a0823160e01b815292931691829182916370a0823191620004b49188910162000ede565b6000546001600160a01b0316331462000b855760405162461bcd60e51b8152600401620003309062001105565b6001600160a01b03811660009081526003602052604090205460ff1662000d73576001600160a01b038116600081815260036020526040808220805460ff1916600117905580516395d89b4160e01b815290519192849230926395d89b4191600480830192889291908290030181865afa15801562000c08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000c329190810190620011a2565b60405160200162000c4491906200125a565b604051602081830303815290604052846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000c92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000cbc9190810190620011a2565b60405160200162000cce91906200128d565b60405160208183030381529060405260405162000ceb9062000ed0565b62000cfa9493929190620012e6565b604051809103906000f08015801562000d17573d6000803e3d6000fd5b506001600160a01b0383811660008181526004602052604080822080546001600160a01b031916948616948517905551939450919290917fdbf34b45b47a653cf4940cccbec765f72d4d63de3237306905bfc0ee2883236291a3505b50565b62000d818262000e54565b6001600160a01b038083166000908152600460208190526040808320549051632d182be560e21b8152931692839163b460af949162000dc7918791339182910162001147565b6020604051808303816000875af115801562000de7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e0d9190620010eb565b60408051858152602081018390529192506001600160a01b0384169133917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101620006d1565b6001600160a01b03811660009081526003602052604090205460ff1662000d735760405162461bcd60e51b815260206004820152602960248201527f53746f726d62697441737365744d616e616765723a20746f6b656e206e6f74206044820152681cdd5c1c1bdc9d195960ba1b606482015260840162000330565b6118db806200132983390190565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811462000f0a57600080fd5b919050565b6000806000806080858703121562000f2657600080fd5b62000f318562000ef2565b93506020850135925062000f486040860162000ef2565b915062000f586060860162000ef2565b905092959194509250565b6000806040838503121562000f7757600080fd5b62000f828362000ef2565b946020939093013593505050565b6000806040838503121562000fa457600080fd5b62000faf8362000ef2565b915062000fbf6020840162000ef2565b90509250929050565b60006020828403121562000fdb57600080fd5b62000fe68262000ef2565b9392505050565b6000806000606084860312156200100357600080fd5b6200100e8462000ef2565b92506200101e6020850162000ef2565b9150604084013590509250925092565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156200106557600080fd5b8151801515811462000fe657600080fd5b60208082526025908201527f53746f726d62697441737365744d616e616765723a207472616e736665722066604082015264185a5b195960da1b606082015260800190565b6001600160a01b03929092168252602082015260400190565b9182526001600160a01b0316602082015260400190565b600060208284031215620010fe57600080fd5b5051919050565b60208082526022908201527f53746f726d62697441737365744d616e616765723a206e6f7420676f7665726e60408201526137b960f11b606082015260800190565b9283526001600160a01b03918216602084015216604082015260600190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620011995781810151838201526020016200117f565b50506000910152565b600060208284031215620011b557600080fd5b81516001600160401b0380821115620011cd57600080fd5b818401915084601f830112620011e257600080fd5b815181811115620011f757620011f762001166565b604051601f8201601f19908116603f0116810190838211818310171562001222576200122262001166565b816040528281528760208487010111156200123c57600080fd5b6200124f8360208301602088016200117c565b979650505050505050565b68029ba37b936b134ba160bd1b815260008251620012808160098501602087016200117c565b9190910160090192915050565b607360f81b815260008251620012ab8160018501602087016200117c565b9190910160010192915050565b60008151808452620012d28160208601602086016200117c565b601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526080604082018190526000906200131490830185620012b8565b82810360608401526200124f8185620012b856fe60c06040523480156200001157600080fd5b50604051620018db380380620018db833981016040819052620000349162000283565b8382826003620000458382620003a7565b506004620000548282620003a7565b5050506000806200006b83620000b860201b60201c565b91509150816200007d5760126200007f565b805b60ff1660a05250506001600160a01b03908116608052600580546001600160a01b031916949091169390931790925550620004ab915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000918291829182916001600160a01b03871691620001019162000473565b600060405180830381855afa9150503d80600081146200013e576040519150601f19603f3d011682016040523d82523d6000602084013e62000143565b606091505b50915091508180156200015857506020815110155b15620001905760008180602001905181019062000176919062000491565b905060ff81116200018e576001969095509350505050565b505b5060009485945092505050565b6001600160a01b0381168114620001b357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001e9578181015183820152602001620001cf565b50506000910152565b600082601f8301126200020457600080fd5b81516001600160401b0380821115620002215762000221620001b6565b604051601f8301601f19908116603f011681019082821181831017156200024c576200024c620001b6565b816040528381528660208588010111156200026657600080fd5b62000279846020830160208901620001cc565b9695505050505050565b600080600080608085870312156200029a57600080fd5b8451620002a7816200019d565b6020860151909450620002ba816200019d565b60408601519093506001600160401b0380821115620002d857600080fd5b620002e688838901620001f2565b93506060870151915080821115620002fd57600080fd5b506200030c87828801620001f2565b91505092959194509250565b600181811c908216806200032d57607f821691505b6020821081036200034e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a257600081815260208120601f850160051c810160208610156200037d5750805b601f850160051c820191505b818110156200039e5782815560010162000389565b5050505b505050565b81516001600160401b03811115620003c357620003c3620001b6565b620003db81620003d4845462000318565b8462000354565b602080601f831160018114620004135760008415620003fa5750858301515b600019600386901b1c1916600185901b1785556200039e565b600085815260208120601f198616915b82811015620004445788860151825594840194600190910190840162000423565b5085821015620004635787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825162000487818460208701620001cc565b9190910192915050565b600060208284031215620004a457600080fd5b5051919050565b60805160a0516113f5620004e660003960006104db0152600081816102080152818161033a01528181610b480152610bfa01526113f56000f3fe608060405234801561001057600080fd5b50600436106101495760003560e01c806301e1d1141461014e57806306fdde031461016957806307a2d13a1461017e578063095ea7b3146101915780630a28a477146101b45780630b509007146101c757806318160ddd146101d157806323b872dd146101d95780632864d070146101c7578063313ce567146101ec57806338d52e0f14610206578063402d267d146102345780634cdad5061461017e5780636e553f651461024757806370a082311461025a57806394bf804d1461026d57806395d89b4114610280578063a9059cbb14610288578063b3d7f6b91461029b578063b460af94146102ae578063ba087652146102c1578063c63d75b614610234578063c6e6f592146102d4578063ce96cb77146102e7578063d905777e146102fa578063dd62ed3e1461030d578063ef8b30f7146102d4575b600080fd5b610156610320565b6040519081526020015b60405180910390f35b6101716103b5565b6040516101609190610fed565b61015661018c366004611020565b610447565b6101a461019f366004611055565b61045a565b6040519015158152602001610160565b6101566101c2366004611020565b610472565b6101cf61047f565b005b600254610156565b6101a46101e736600461107f565b6104ac565b6101f46104d2565b60405160ff9091168152602001610160565b7f000000000000000000000000000000000000000000000000000000000000000060405161016091906110bb565b6101566102423660046110cf565b6104ff565b6101566102553660046110ea565b610506565b6101566102683660046110cf565b61053e565b61015661027b3660046110ea565b610559565b610171610591565b6101a4610296366004611055565b6105a0565b6101566102a9366004611020565b6105ae565b6101566102bc366004611116565b6105bb565b6101566102cf366004611116565b6105fc565b6101566102e2366004611020565b610635565b6101566102f53660046110cf565b610642565b6101566103083660046110cf565b610657565b61015661031b366004611152565b610662565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061036f9030906004016110bb565b602060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b0919061117c565b905090565b6060600380546103c490611195565b80601f01602080910402602001604051908101604052809291908181526020018280546103f090611195565b801561043d5780601f106104125761010080835404028352916020019161043d565b820191906000526020600020905b81548152906001019060200180831161042057829003601f168201915b5050505050905090565b600061045482600061068d565b92915050565b6000336104688185856106c7565b5060019392505050565b60006104548260016106d9565b6005546001600160a01b031633146104aa57604051636d5ab9d360e01b815260040160405180910390fd5b565b6000336104ba85828561070a565b6104c5858585610766565b60019150505b9392505050565b60006103b060087f00000000000000000000000000000000000000000000000000000000000000006111e5565b5060001990565b6005546000906001600160a01b0316331461053457604051636d5ab9d360e01b815260040160405180910390fd5b6104cb83836107c5565b6001600160a01b031660009081526020819052604090205490565b6005546000906001600160a01b0316331461058757604051636d5ab9d360e01b815260040160405180910390fd5b6104cb8383610813565b6060600480546103c490611195565b600033610468818585610766565b600061045482600161068d565b6005546000906001600160a01b031633146105e957604051636d5ab9d360e01b815260040160405180910390fd5b6105f4848484610861565b949350505050565b6005546000906001600160a01b0316331461062a57604051636d5ab9d360e01b815260040160405180910390fd5b6105f48484846108b9565b60006104548260006106d9565b60006104546106508361053e565b600061068d565b60006104548261053e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60006104cb61069a610320565b6106a59060016111fe565b6106b16008600a6112f5565b6002546106be91906111fe565b85919085610908565b6106d48383836001610957565b505050565b60006104cb6106ea6008600a6112f5565b6002546106f791906111fe565b6106ff610320565b6106be9060016111fe565b60006107168484610662565b90506000198114610760578181101561075157828183604051637dc7a0d960e11b815260040161074893929190611304565b60405180910390fd5b61076084848484036000610957565b50505050565b6001600160a01b038316610790576000604051634b637e8f60e11b815260040161074891906110bb565b6001600160a01b0382166107ba57600060405163ec442f0560e01b815260040161074891906110bb565b6106d4838383610a2c565b6000806107d1836104ff565b9050808411156107fa57828482604051633c8097d960e11b815260040161074893929190611304565b600061080585610635565b90506105f433858784610b43565b60008061081f836104ff565b9050808411156108485782848260405163284ff66760e01b815260040161074893929190611304565b6000610853856105ae565b90506105f433858388610b43565b60008061086d83610642565b90508085111561089657828582604051633fa733bb60e21b815260040161074893929190611304565b60006108a186610472565b90506108b03386868985610bc7565b95945050505050565b6000806108c583610657565b9050808511156108ee57828582604051632e52afbb60e21b815260040161074893929190611304565b60006108f986610447565b90506108b0338686848a610bc7565b600080610916868686610c87565b905061092183610d4b565b801561093d57506000848061093857610938611325565b868809115b156108b05761094d6001826111fe565b9695505050505050565b6001600160a01b03841661098157600060405163e602df0560e01b815260040161074891906110bb565b6001600160a01b0383166109ab576000604051634a1406b160e11b815260040161074891906110bb565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561076057826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a1e91815260200190565b60405180910390a350505050565b6001600160a01b038316610a57578060026000828254610a4c91906111fe565b90915550610ab69050565b6001600160a01b03831660009081526020819052604090205481811015610a975783818360405163391434e360e21b815260040161074893929190611304565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610ad257600280548290039055610af1565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b3691815260200190565b60405180910390a3505050565b610b6f7f0000000000000000000000000000000000000000000000000000000000000000853085610d78565b610b798382610ddf565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051610a1e929190918252602082015260400190565b826001600160a01b0316856001600160a01b031614610beb57610beb83868361070a565b610bf58382610e19565b610c207f00000000000000000000000000000000000000000000000000000000000000008584610e4f565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051610c78929190918252602082015260400190565b60405180910390a45050505050565b6000838302816000198587098281108382030391505080600003610cbe57838281610cb457610cb4611325565b04925050506104cb565b808411610cde5760405163227bc15360e01b815260040160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60006002826003811115610d6157610d6161133b565b610d6b9190611351565b60ff166001149050919050565b6040516001600160a01b0384811660248301528381166044830152606482018390526107609186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610e80565b6001600160a01b038216610e0957600060405163ec442f0560e01b815260040161074891906110bb565b610e1560008383610a2c565b5050565b6001600160a01b038216610e43576000604051634b637e8f60e11b815260040161074891906110bb565b610e1582600083610a2c565b6040516001600160a01b038381166024830152604482018390526106d491859182169063a9059cbb90606401610dad565b6000610e956001600160a01b03841683610eda565b90508051600014158015610eba575080806020019051810190610eb89190611381565b155b156106d45782604051635274afe760e01b815260040161074891906110bb565b60606104cb8383600084600080856001600160a01b03168486604051610f0091906113a3565b60006040518083038185875af1925050503d8060008114610f3d576040519150601f19603f3d011682016040523d82523d6000602084013e610f42565b606091505b509150915061094d868383606082610f6257610f5d82610fa0565b6104cb565b8151158015610f7957506001600160a01b0384163b155b15610f995783604051639996b31560e01b815260040161074891906110bb565b50806104cb565b805115610fb05780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60005b83811015610fe4578181015183820152602001610fcc565b50506000910152565b602081526000825180602084015261100c816040850160208701610fc9565b601f01601f19169190910160400192915050565b60006020828403121561103257600080fd5b5035919050565b80356001600160a01b038116811461105057600080fd5b919050565b6000806040838503121561106857600080fd5b61107183611039565b946020939093013593505050565b60008060006060848603121561109457600080fd5b61109d84611039565b92506110ab60208501611039565b9150604084013590509250925092565b6001600160a01b0391909116815260200190565b6000602082840312156110e157600080fd5b6104cb82611039565b600080604083850312156110fd57600080fd5b8235915061110d60208401611039565b90509250929050565b60008060006060848603121561112b57600080fd5b8335925061113b60208501611039565b915061114960408501611039565b90509250925092565b6000806040838503121561116557600080fd5b61116e83611039565b915061110d60208401611039565b60006020828403121561118e57600080fd5b5051919050565b600181811c908216806111a957607f821691505b6020821081036111c957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610454576104546111cf565b80820180821115610454576104546111cf565b600181815b8085111561124c578160001904821115611232576112326111cf565b8085161561123f57918102915b93841c9390800290611216565b509250929050565b60008261126357506001610454565b8161127057506000610454565b81600181146112865760028114611290576112ac565b6001915050610454565b60ff8411156112a1576112a16111cf565b50506001821b610454565b5060208310610133831016604e8410600b84101617156112cf575081810a610454565b6112d98383611211565b80600019048211156112ed576112ed6111cf565b029392505050565b60006104cb60ff841683611254565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060ff83168061137257634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60006020828403121561139357600080fd5b815180151581146104cb57600080fd5b600082516113b5818460208701610fc9565b919091019291505056fea26469706673582212207d0b355d1ca9c88fef3811c79f86c4633218866e388f14373630fc969ebdd7c664736f6c634300081500335548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62a2646970667358221220a3c6e2e67eae5161ead915e5fa109782dfc57a7156bcd48d94a7d5f33c7b151a64736f6c63430008150033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000d65760003560e01c80630c340a2414620000db5780632ab5c0a514620001005780633e5541f1146200011957806347e7ef24146200013f578063485cc955146200015657806350603df3146200016d5780635fa7b58414620001845780636b4ee7f3146200019b57806375151b6314620001b25780639dc6108f14620001f25780639e3b77af1462000209578063a362d782146200021d578063b3ccbcfe1462000234578063d48bfca71462000248578063f3fef3a3146200025f575b600080fd5b6000546001600160a01b03165b604051620000f7919062000ede565b60405180910390f35b620001176200011136600462000f0f565b62000276565b005b620001306200012a36600462000f63565b6200046c565b604051908152602001620000f7565b620001176200015036600462000f63565b62000501565b620001176200016736600462000f90565b620006df565b620001306200017e36600462000f63565b6200081a565b620001176200019536600462000fc8565b62000862565b62000117620001ac36600462000fed565b620009b8565b620001e1620001c336600462000fc8565b6001600160a01b031660009081526003602052604090205460ff1690565b6040519015158152602001620000f7565b620000e86200020336600462000fc8565b62000af5565b600254620000e8906001600160a01b031681565b620001306200022e36600462000f90565b62000b13565b600154620000e8906001600160a01b031681565b620001176200025936600462000fc8565b62000b58565b620001176200027036600462000f63565b62000d76565b620002818462000e54565b6001600160a01b0380851660008181526004602081905260408083205490516323b872dd60e01b81529416939192916323b872dd91620002c891889130918b91016200102e565b6020604051808303816000875af1158015620002e8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030e919062001052565b905080620003395760405162461bcd60e51b8152600401620003309062001076565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b390620003699085908990600401620010bb565b6020604051808303816000875af115801562000389573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003af919062001052565b50604051636e553f6560e01b81526001600160a01b03831690636e553f6590620003e09088908790600401620010d4565b6020604051808303816000875af115801562000400573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004269190620010eb565b50856001600160a01b0316836001600160a01b031660008051602062002c04833981519152876040516200045c91815260200190565b60405180910390a3505050505050565b6001600160a01b0380831660009081526004602081905260408083205490516363737ac960e11b8152929316918291829163c6e6f59291620004b49188910190815260200190565b602060405180830381865afa158015620004d2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f89190620010eb565b95945050505050565b6200050c8262000e54565b6001600160a01b0380831660008181526004602081905260408083205490516323b872dd60e01b81529416939192916323b872dd916200055391339130918991016200102e565b6020604051808303816000875af115801562000573573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000599919062001052565b905080620005bb5760405162461bcd60e51b8152600401620003309062001076565b60405163095ea7b360e01b81526001600160a01b0385169063095ea7b390620005eb9085908790600401620010bb565b6020604051808303816000875af11580156200060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000631919062001052565b50604051636e553f6560e01b81526001600160a01b03831690636e553f6590620006629086903390600401620010d4565b6020604051808303816000875af115801562000682573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a89190620010eb565b506040518381526001600160a01b03851690339060008051602062002c04833981519152906020015b60405180910390a350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015620007255750825b90506000826001600160401b03166001148015620007425750303b155b90508115801562000751575080155b15620007705760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b031916600117855583156200079a57845460ff60401b1916600160401b1785555b600180546001600160a01b03808a166001600160a01b031992831617909255600280549289169290911691909117905583156200081157845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6001600160a01b0380831660009081526004602081905260408083205490516303d1689d60e11b815292931691829182916307a2d13a91620004b49188910190815260200190565b6000546001600160a01b031633146200088f5760405162461bcd60e51b8152600401620003309062001105565b6001600160a01b038082166000908152600460208181526040928390205483516318160ddd60e01b8152935194169384936318160ddd938181019392918290030181865afa158015620008e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090c9190620010eb565b15620009695760405162461bcd60e51b815260206004820152602560248201527f53746f726d62697441737365744d616e616765723a207661756c74206e6f7420604482015264656d70747960d81b606482015260840162000330565b6001600160a01b03808316600081815260036020526040808220805460ff1916905551928416927f39dcd754ec63af4b82c4c569ff1b6b4e55a8038e6545844747e54f2f2d4e8e509190a35050565b6002546001600160a01b0316331462000a265760405162461bcd60e51b815260206004820152602960248201527f53746f726d62697441737365744d616e616765723a206e6f74206c656e64696e604482015268339036b0b730b3b2b960b91b606482015260840162000330565b600062000a338362000af5565b604051632d182be560e21b81529091506001600160a01b0382169063b460af949062000a689085908890339060040162001147565b6020604051808303816000875af115801562000a88573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aae9190620010eb565b50826001600160a01b0316846001600160a01b03167f3733fa05f9ab2438e9b8352d03ce86b0b247d1d68c8cb3187f3d7f4b5954c71b84604051620006d191815260200190565b6001600160a01b039081166000908152600460205260409020541690565b6001600160a01b0380831660009081526004602081905260408083205490516370a0823160e01b815292931691829182916370a0823191620004b49188910162000ede565b6000546001600160a01b0316331462000b855760405162461bcd60e51b8152600401620003309062001105565b6001600160a01b03811660009081526003602052604090205460ff1662000d73576001600160a01b038116600081815260036020526040808220805460ff1916600117905580516395d89b4160e01b815290519192849230926395d89b4191600480830192889291908290030181865afa15801562000c08573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000c329190810190620011a2565b60405160200162000c4491906200125a565b604051602081830303815290604052846001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000c92573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000cbc9190810190620011a2565b60405160200162000cce91906200128d565b60405160208183030381529060405260405162000ceb9062000ed0565b62000cfa9493929190620012e6565b604051809103906000f08015801562000d17573d6000803e3d6000fd5b506001600160a01b0383811660008181526004602052604080822080546001600160a01b031916948616948517905551939450919290917fdbf34b45b47a653cf4940cccbec765f72d4d63de3237306905bfc0ee2883236291a3505b50565b62000d818262000e54565b6001600160a01b038083166000908152600460208190526040808320549051632d182be560e21b8152931692839163b460af949162000dc7918791339182910162001147565b6020604051808303816000875af115801562000de7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e0d9190620010eb565b60408051858152602081018390529192506001600160a01b0384169133917ff341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb5679101620006d1565b6001600160a01b03811660009081526003602052604090205460ff1662000d735760405162461bcd60e51b815260206004820152602960248201527f53746f726d62697441737365744d616e616765723a20746f6b656e206e6f74206044820152681cdd5c1c1bdc9d195960ba1b606482015260840162000330565b6118db806200132983390190565b6001600160a01b0391909116815260200190565b80356001600160a01b038116811462000f0a57600080fd5b919050565b6000806000806080858703121562000f2657600080fd5b62000f318562000ef2565b93506020850135925062000f486040860162000ef2565b915062000f586060860162000ef2565b905092959194509250565b6000806040838503121562000f7757600080fd5b62000f828362000ef2565b946020939093013593505050565b6000806040838503121562000fa457600080fd5b62000faf8362000ef2565b915062000fbf6020840162000ef2565b90509250929050565b60006020828403121562000fdb57600080fd5b62000fe68262000ef2565b9392505050565b6000806000606084860312156200100357600080fd5b6200100e8462000ef2565b92506200101e6020850162000ef2565b9150604084013590509250925092565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156200106557600080fd5b8151801515811462000fe657600080fd5b60208082526025908201527f53746f726d62697441737365744d616e616765723a207472616e736665722066604082015264185a5b195960da1b606082015260800190565b6001600160a01b03929092168252602082015260400190565b9182526001600160a01b0316602082015260400190565b600060208284031215620010fe57600080fd5b5051919050565b60208082526022908201527f53746f726d62697441737365744d616e616765723a206e6f7420676f7665726e60408201526137b960f11b606082015260800190565b9283526001600160a01b03918216602084015216604082015260600190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620011995781810151838201526020016200117f565b50506000910152565b600060208284031215620011b557600080fd5b81516001600160401b0380821115620011cd57600080fd5b818401915084601f830112620011e257600080fd5b815181811115620011f757620011f762001166565b604051601f8201601f19908116603f0116810190838211818310171562001222576200122262001166565b816040528281528760208487010111156200123c57600080fd5b6200124f8360208301602088016200117c565b979650505050505050565b68029ba37b936b134ba160bd1b815260008251620012808160098501602087016200117c565b9190910160090192915050565b607360f81b815260008251620012ab8160018501602087016200117c565b9190910160010192915050565b60008151808452620012d28160208601602086016200117c565b601f01601f19169290920160200192915050565b6001600160a01b038581168252841660208201526080604082018190526000906200131490830185620012b8565b82810360608401526200124f8185620012b856fe60c06040523480156200001157600080fd5b50604051620018db380380620018db833981016040819052620000349162000283565b8382826003620000458382620003a7565b506004620000548282620003a7565b5050506000806200006b83620000b860201b60201c565b91509150816200007d5760126200007f565b805b60ff1660a05250506001600160a01b03908116608052600580546001600160a01b031916949091169390931790925550620004ab915050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000918291829182916001600160a01b03871691620001019162000473565b600060405180830381855afa9150503d80600081146200013e576040519150601f19603f3d011682016040523d82523d6000602084013e62000143565b606091505b50915091508180156200015857506020815110155b15620001905760008180602001905181019062000176919062000491565b905060ff81116200018e576001969095509350505050565b505b5060009485945092505050565b6001600160a01b0381168114620001b357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001e9578181015183820152602001620001cf565b50506000910152565b600082601f8301126200020457600080fd5b81516001600160401b0380821115620002215762000221620001b6565b604051601f8301601f19908116603f011681019082821181831017156200024c576200024c620001b6565b816040528381528660208588010111156200026657600080fd5b62000279846020830160208901620001cc565b9695505050505050565b600080600080608085870312156200029a57600080fd5b8451620002a7816200019d565b6020860151909450620002ba816200019d565b60408601519093506001600160401b0380821115620002d857600080fd5b620002e688838901620001f2565b93506060870151915080821115620002fd57600080fd5b506200030c87828801620001f2565b91505092959194509250565b600181811c908216806200032d57607f821691505b6020821081036200034e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003a257600081815260208120601f850160051c810160208610156200037d5750805b601f850160051c820191505b818110156200039e5782815560010162000389565b5050505b505050565b81516001600160401b03811115620003c357620003c3620001b6565b620003db81620003d4845462000318565b8462000354565b602080601f831160018114620004135760008415620003fa5750858301515b600019600386901b1c1916600185901b1785556200039e565b600085815260208120601f198616915b82811015620004445788860151825594840194600190910190840162000423565b5085821015620004635787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825162000487818460208701620001cc565b9190910192915050565b600060208284031215620004a457600080fd5b5051919050565b60805160a0516113f5620004e660003960006104db0152600081816102080152818161033a01528181610b480152610bfa01526113f56000f3fe608060405234801561001057600080fd5b50600436106101495760003560e01c806301e1d1141461014e57806306fdde031461016957806307a2d13a1461017e578063095ea7b3146101915780630a28a477146101b45780630b509007146101c757806318160ddd146101d157806323b872dd146101d95780632864d070146101c7578063313ce567146101ec57806338d52e0f14610206578063402d267d146102345780634cdad5061461017e5780636e553f651461024757806370a082311461025a57806394bf804d1461026d57806395d89b4114610280578063a9059cbb14610288578063b3d7f6b91461029b578063b460af94146102ae578063ba087652146102c1578063c63d75b614610234578063c6e6f592146102d4578063ce96cb77146102e7578063d905777e146102fa578063dd62ed3e1461030d578063ef8b30f7146102d4575b600080fd5b610156610320565b6040519081526020015b60405180910390f35b6101716103b5565b6040516101609190610fed565b61015661018c366004611020565b610447565b6101a461019f366004611055565b61045a565b6040519015158152602001610160565b6101566101c2366004611020565b610472565b6101cf61047f565b005b600254610156565b6101a46101e736600461107f565b6104ac565b6101f46104d2565b60405160ff9091168152602001610160565b7f000000000000000000000000000000000000000000000000000000000000000060405161016091906110bb565b6101566102423660046110cf565b6104ff565b6101566102553660046110ea565b610506565b6101566102683660046110cf565b61053e565b61015661027b3660046110ea565b610559565b610171610591565b6101a4610296366004611055565b6105a0565b6101566102a9366004611020565b6105ae565b6101566102bc366004611116565b6105bb565b6101566102cf366004611116565b6105fc565b6101566102e2366004611020565b610635565b6101566102f53660046110cf565b610642565b6101566103083660046110cf565b610657565b61015661031b366004611152565b610662565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319061036f9030906004016110bb565b602060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b0919061117c565b905090565b6060600380546103c490611195565b80601f01602080910402602001604051908101604052809291908181526020018280546103f090611195565b801561043d5780601f106104125761010080835404028352916020019161043d565b820191906000526020600020905b81548152906001019060200180831161042057829003601f168201915b5050505050905090565b600061045482600061068d565b92915050565b6000336104688185856106c7565b5060019392505050565b60006104548260016106d9565b6005546001600160a01b031633146104aa57604051636d5ab9d360e01b815260040160405180910390fd5b565b6000336104ba85828561070a565b6104c5858585610766565b60019150505b9392505050565b60006103b060087f00000000000000000000000000000000000000000000000000000000000000006111e5565b5060001990565b6005546000906001600160a01b0316331461053457604051636d5ab9d360e01b815260040160405180910390fd5b6104cb83836107c5565b6001600160a01b031660009081526020819052604090205490565b6005546000906001600160a01b0316331461058757604051636d5ab9d360e01b815260040160405180910390fd5b6104cb8383610813565b6060600480546103c490611195565b600033610468818585610766565b600061045482600161068d565b6005546000906001600160a01b031633146105e957604051636d5ab9d360e01b815260040160405180910390fd5b6105f4848484610861565b949350505050565b6005546000906001600160a01b0316331461062a57604051636d5ab9d360e01b815260040160405180910390fd5b6105f48484846108b9565b60006104548260006106d9565b60006104546106508361053e565b600061068d565b60006104548261053e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60006104cb61069a610320565b6106a59060016111fe565b6106b16008600a6112f5565b6002546106be91906111fe565b85919085610908565b6106d48383836001610957565b505050565b60006104cb6106ea6008600a6112f5565b6002546106f791906111fe565b6106ff610320565b6106be9060016111fe565b60006107168484610662565b90506000198114610760578181101561075157828183604051637dc7a0d960e11b815260040161074893929190611304565b60405180910390fd5b61076084848484036000610957565b50505050565b6001600160a01b038316610790576000604051634b637e8f60e11b815260040161074891906110bb565b6001600160a01b0382166107ba57600060405163ec442f0560e01b815260040161074891906110bb565b6106d4838383610a2c565b6000806107d1836104ff565b9050808411156107fa57828482604051633c8097d960e11b815260040161074893929190611304565b600061080585610635565b90506105f433858784610b43565b60008061081f836104ff565b9050808411156108485782848260405163284ff66760e01b815260040161074893929190611304565b6000610853856105ae565b90506105f433858388610b43565b60008061086d83610642565b90508085111561089657828582604051633fa733bb60e21b815260040161074893929190611304565b60006108a186610472565b90506108b03386868985610bc7565b95945050505050565b6000806108c583610657565b9050808511156108ee57828582604051632e52afbb60e21b815260040161074893929190611304565b60006108f986610447565b90506108b0338686848a610bc7565b600080610916868686610c87565b905061092183610d4b565b801561093d57506000848061093857610938611325565b868809115b156108b05761094d6001826111fe565b9695505050505050565b6001600160a01b03841661098157600060405163e602df0560e01b815260040161074891906110bb565b6001600160a01b0383166109ab576000604051634a1406b160e11b815260040161074891906110bb565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561076057826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a1e91815260200190565b60405180910390a350505050565b6001600160a01b038316610a57578060026000828254610a4c91906111fe565b90915550610ab69050565b6001600160a01b03831660009081526020819052604090205481811015610a975783818360405163391434e360e21b815260040161074893929190611304565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610ad257600280548290039055610af1565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b3691815260200190565b60405180910390a3505050565b610b6f7f0000000000000000000000000000000000000000000000000000000000000000853085610d78565b610b798382610ddf565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78484604051610a1e929190918252602082015260400190565b826001600160a01b0316856001600160a01b031614610beb57610beb83868361070a565b610bf58382610e19565b610c207f00000000000000000000000000000000000000000000000000000000000000008584610e4f565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051610c78929190918252602082015260400190565b60405180910390a45050505050565b6000838302816000198587098281108382030391505080600003610cbe57838281610cb457610cb4611325565b04925050506104cb565b808411610cde5760405163227bc15360e01b815260040160405180910390fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60006002826003811115610d6157610d6161133b565b610d6b9190611351565b60ff166001149050919050565b6040516001600160a01b0384811660248301528381166044830152606482018390526107609186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610e80565b6001600160a01b038216610e0957600060405163ec442f0560e01b815260040161074891906110bb565b610e1560008383610a2c565b5050565b6001600160a01b038216610e43576000604051634b637e8f60e11b815260040161074891906110bb565b610e1582600083610a2c565b6040516001600160a01b038381166024830152604482018390526106d491859182169063a9059cbb90606401610dad565b6000610e956001600160a01b03841683610eda565b90508051600014158015610eba575080806020019051810190610eb89190611381565b155b156106d45782604051635274afe760e01b815260040161074891906110bb565b60606104cb8383600084600080856001600160a01b03168486604051610f0091906113a3565b60006040518083038185875af1925050503d8060008114610f3d576040519150601f19603f3d011682016040523d82523d6000602084013e610f42565b606091505b509150915061094d868383606082610f6257610f5d82610fa0565b6104cb565b8151158015610f7957506001600160a01b0384163b155b15610f995783604051639996b31560e01b815260040161074891906110bb565b50806104cb565b805115610fb05780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60005b83811015610fe4578181015183820152602001610fcc565b50506000910152565b602081526000825180602084015261100c816040850160208701610fc9565b601f01601f19169190910160400192915050565b60006020828403121561103257600080fd5b5035919050565b80356001600160a01b038116811461105057600080fd5b919050565b6000806040838503121561106857600080fd5b61107183611039565b946020939093013593505050565b60008060006060848603121561109457600080fd5b61109d84611039565b92506110ab60208501611039565b9150604084013590509250925092565b6001600160a01b0391909116815260200190565b6000602082840312156110e157600080fd5b6104cb82611039565b600080604083850312156110fd57600080fd5b8235915061110d60208401611039565b90509250929050565b60008060006060848603121561112b57600080fd5b8335925061113b60208501611039565b915061114960408501611039565b90509250925092565b6000806040838503121561116557600080fd5b61116e83611039565b915061110d60208401611039565b60006020828403121561118e57600080fd5b5051919050565b600181811c908216806111a957607f821691505b6020821081036111c957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60ff8181168382160190811115610454576104546111cf565b80820180821115610454576104546111cf565b600181815b8085111561124c578160001904821115611232576112326111cf565b8085161561123f57918102915b93841c9390800290611216565b509250929050565b60008261126357506001610454565b8161127057506000610454565b81600181146112865760028114611290576112ac565b6001915050610454565b60ff8411156112a1576112a16111cf565b50506001821b610454565b5060208310610133831016604e8410600b84101617156112cf575081810a610454565b6112d98383611211565b80600019048211156112ed576112ed6111cf565b029392505050565b60006104cb60ff841683611254565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060ff83168061137257634e487b7160e01b600052601260045260246000fd5b8060ff84160691505092915050565b60006020828403121561139357600080fd5b815180151581146104cb57600080fd5b600082516113b5818460208701610fc9565b919091019291505056fea26469706673582212207d0b355d1ca9c88fef3811c79f86c4633218866e388f14373630fc969ebdd7c664736f6c634300081500335548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62a2646970667358221220a3c6e2e67eae5161ead915e5fa109782dfc57a7156bcd48d94a7d5f33c7b151a64736f6c63430008150033",
  "devdoc": {
    "author": "Quantum3 Labs",
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Withdraw(address,address,uint256,uint256)": {
        "details": "note that withdraw event uses assets instead of shares"
      }
    },
    "kind": "dev",
    "methods": {
      "addToken(address)": {
        "details": "allow governor to add a new token",
        "params": {
          "token": "address of the token"
        }
      },
      "borrowerWithdraw(address,address,uint256)": {
        "details": "call by lending manager, use for execute loan, redeem shares for borrower"
      },
      "convertToAssets(address,uint256)": {
        "details": "convert shares to assets based on the vault"
      },
      "convertToShares(address,uint256)": {
        "details": "convert assets to shares based on the vault"
      },
      "deposit(address,uint256)": {
        "details": "allow depositor deposit assets to the vault",
        "params": {
          "assets": "amount of assets to deposit",
          "token": "address of the token"
        }
      },
      "depositFrom(address,uint256,address,address)": {
        "details": "same function as deposit, but allow user to deposit on behalf of another user"
      },
      "getUserShares(address,address)": {
        "details": "get user shares on specific vault"
      },
      "getVaultToken(address)": {
        "details": "get vault token  address"
      },
      "initialize(address,address)": {
        "details": "used to initialize loan and lend manager address",
        "params": {
          "lendingManagerAddr": "address of the lending manager",
          "loanManagerAddr": "address of the loan manager"
        }
      },
      "isTokenSupported(address)": {
        "details": "check if token is supported",
        "params": {
          "token": "address of the token"
        }
      },
      "removeToken(address)": {
        "details": "allow governor to remove the support of a token",
        "params": {
          "token": "address of the token"
        }
      },
      "withdraw(address,uint256)": {
        "details": "note that we dont require the token to be whitelisted"
      }
    },
    "title": "Stormbit Asset Manager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "entrypoint for all asset management operations",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3563,
        "contract": "contracts/AssetManager.sol:StormbitAssetManager",
        "label": "_governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3566,
        "contract": "contracts/AssetManager.sol:StormbitAssetManager",
        "label": "loanManager",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILoanManager)7179"
      },
      {
        "astId": 3569,
        "contract": "contracts/AssetManager.sol:StormbitAssetManager",
        "label": "lendingManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILendingManager)6878"
      },
      {
        "astId": 3573,
        "contract": "contracts/AssetManager.sol:StormbitAssetManager",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3577,
        "contract": "contracts/AssetManager.sol:StormbitAssetManager",
        "label": "vaultTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILendingManager)6878": {
        "encoding": "inplace",
        "label": "contract ILendingManager",
        "numberOfBytes": "20"
      },
      "t_contract(ILoanManager)7179": {
        "encoding": "inplace",
        "label": "contract ILoanManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}